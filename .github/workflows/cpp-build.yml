# =================================================================================================
# GITHUB ACTIONS WORKFLOW FOR BUILDING THE SUFFICIT/SUFFICIT-MICROSIP PROJECT
#
# WORKFLOW VERSION: 15 (Final - Isolate Patch Script)
#
# Author: Hugo Castro de Deco, Sufficit
# Collaboration: Gemini AI for Google
# Date: June 12, 2025
#
# == Logic and Execution Steps (Final Reviewed Version) ==
#
# This workflow uses a robust, industry-standard approach to solve the YAML syntax errors by
# completely isolating the complex PowerShell script into its own file.
#
# 1.  **Setup (Steps 1-4):** Standard checkout and directory restructuring. This is validated.
#
# 2.  **Configuration (Step 5):** Creates the mandatory `pjlib/include/pj/config_site.h`.
#
# 3.  **Create Patch Script (Step 6):** A new, critical step that writes the robust PowerShell
#     patching logic to its own file, `patch.ps1`. This prevents the GitHub Actions YAML parser
#     from ever touching the complex script content. THIS IS THE FIX for all previous syntax errors.
#
# 4.  **Execute Patch Script (Step 7):** Simply executes the newly created `.ps1` file. This
#     patches the broken `pjmedia-codec.vcxproj` file to add the correct Opus include path.
#
# 5.  **Build & Finalize (Steps 9-13):** With the PJSIP project now truly fixed, the main solution
#     build (without `continue-on-error`) will succeed, allowing all subsequent copy, rename,
#     and final build steps to function as intended.
# =================================================================================================

name: Build C++ and Create Release

on:
  push:
    branches: [ "main" ]

jobs:
  build:
    runs-on: windows-latest
    outputs:
      version: ${{ steps.generate_version.outputs.VERSION }}

    steps:
    - name: 1. Checkout MicroSip Repository
      uses: actions/checkout@v4
      with:
        repository: sufficit/sufficit-microsip
        path: sufficit-microsip

    - name: 2. Clone PJSIP Repository
      uses: actions/checkout@v4
      with:
        repository: pjsip/pjproject
        path: pjproject
    
    - name: 3. Clone Opus into PJSIP third_party
      uses: actions/checkout@v4
      with:
        repository: xiph/opus
        path: pjproject/third_party/opus

    - name: 4. Restructure PJSIP directories
      shell: pwsh
      run: |
        Move-Item -Path ${{ github.workspace }}\pjproject\* -Destination ${{ github.workspace }}\
        Remove-Item -Path ${{ github.workspace }}\pjproject -Recurse -Force

    - name: 5. Create PJSIP config_site.h
      shell: pwsh
      run: |
        @"
#define PJ_WIN32 1
#include <windows.h>
#define PJ_HAS_IPV6 1
#define PJMEDIA_HAS_OPUS_CODEC 1
#define PJMEDIA_OPUS_DEFAULT_BIT_RATE 32000
#define PJ_LOG_MAX_LEVEL 4
#define PJSUA_MAX_ACC 10
#define PJSUA_MAX_CALLS 32
"@ | Set-Content -Path "${{ github.workspace }}\pjlib\include\pj\config_site.h"
        echo "Created pjlib/include/pj/config_site.h"

    - name: 6. Create PJSIP Patch Script
      shell: pwsh
      run: |
        @"
        \$projFile = "pjmedia/build/pjmedia-codec.vcxproj"
        Write-Host "Loading project file to patch: \$projFile"
        \$xml = [xml](Get-Content \$projFile)
        
        \$targetCondition = "'`$(Configuration)`|`$(Platform)'=='Release|Win32'"
        \$patched = \$false
        
        foreach (\$group in \$xml.Project.ItemDefinitionGroup) {
            if (\$group.Condition -eq \$targetCondition) {
                Write-Host "Found 'Release|Win32' configuration. Patching..."
                \$includeDirsNode = \$group.ClCompile.AdditionalIncludeDirectories
                \$currentIncludes = \$includeDirsNode.'#text'
                \$newIncludePath = ";../../third_party/opus/include"

                if (\$currentIncludes -notlike "*\$newIncludePath*") {
                    \$includeDirsNode.'#text' = \$currentIncludes + \$newIncludePath
                    Write-Host "Successfully patched include path."
                } else {
                    Write-Host "Include path already exists. No patch needed."
                }
                \$patched = \$true
                break
            }
        }
        
        if (-not \$patched) {
            Write-Host "FATAL: Could not find 'Release|Win32' configuration in \$projFile to patch."
            exit 1
        }
        
        \$xml.Save(\$projFile)
        Write-Host "Saved updated project file: \$projFile"
"@ | Set-Content -Path "patch.ps1"

    - name: 7. Execute PJSIP Patch Script
      shell: pwsh
      run: ./patch.ps1
        
    - name: 8. Add MSBuild to path
      uses: microsoft/setup-msbuild@v2

    - name: 9. Build Entire PJSIP Solution
      shell: pwsh
      run: |
        echo "Building the entire PJSIP solution (pjproject-vs14.sln)..."
        msbuild.exe pjproject-vs14.sln /p:Configuration=Release /p:Platform=Win32

    - name: 10. Prepare Libraries for Final Build
      shell: pwsh
      run: |
        echo "--- Preparing all required libraries for MicroSIP ---"
        \$microsip_lib_dir = "sufficit-microsip/lib"
        \$microsip_opus_dir = "sufficit-microsip/third_party/opus/Win32"
        New-Item -ItemType Directory -Force -Path \$microsip_lib_dir
        New-Item -ItemType Directory -Force -Path \$microsip_opus_dir
        
        \$opus_source_file = Get-Item "third_party/lib/libopus-*.lib"
        Copy-Item -Path \$opus_source_file.FullName -Destination "\$microsip_opus_dir/opus.lib" -Force
        echo "Copied \$(\$opus_source_file.Name) to \$microsip_opus_dir/opus.lib"

        \$pjlib_source = Get-Item "lib/libpjproject-i386-Win32-vc14-Release.lib"
        \$pjlib_dest_renamed = "\$microsip_lib_dir/libpjproject-i386-Win32-vc14-Release-Static.lib"
        Copy-Item -Path \$pjlib_source.FullName -Destination \$pjlib_dest_renamed -Force
        echo "Copied and Renamed \$(\$pjlib_source.Name) to \$pjlib_dest_renamed"

    - name: 11. Generate Version Tag
      id: generate_version
      working-directory: ./sufficit-microsip
      run: |
        \$VERSION="v\$(Get-Date -Format 'yyyy.MM.dd').\${{ github.run_number }}"
        echo "VERSION=\$VERSION" | Out-File -FilePath \$env:GITHUB_OUTPUT -Append
      
    - name: 12. Build the final project
      working-directory: ./sufficit-microsip
      run: msbuild.exe /p:Configuration=Release /p:Platform=x86 microsip.vcxproj

    - name: 13. Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: microsip-build
        path: sufficit-microsip/Release/microsip.exe

  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - name: 1. Download build artifact
      uses: actions/download-artifact@v4
      with:
        name: microsip-build

    - name: 2. Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: \${{ needs.build.outputs.version }}
        name: "Release \${{ needs.build.outputs.version }}"
        body: |
          Versão compilada automaticamente a partir do último push para a branch main.
        files: microsip.exe