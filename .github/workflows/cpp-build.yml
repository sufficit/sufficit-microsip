# =================================================================================================
# GITHUB ACTIONS WORKFLOW FOR BUILDING THE SUFFICIT/SUFFICIT-MICROSIP PROJECT
#
# WORKFLOW VERSION: 7
#
# Author: Hugo Castro de Deco, Sufficit
# Collaboration: Gemini AI for Google
# Date: June 12, 2025
#
# == Logic and Execution Steps (Validated up to this version) ==
#
# 1.  **Checkout & Structure (Steps 1-4):** All source codes are checked out, with Opus's source
#     placed inside PJSIP's `third_party` directory. PJSIP is moved to the workspace root.
# 2.  **Configuration (Step 5):** The mandatory `pjlib/include/pj/config_site.h` is created.
#
# == Objective of This Version ==
#
# 3.  **Patch PJSIP Project File (Step 6):** The PowerShell script in v6 failed due to a syntax
#     error. This version corrects the script by properly escaping special characters (`$`),
#     ensuring the `.vcxproj` file is successfully modified to include the correct Opus header path.
#
# 4.  **Unified PJSIP Build (Step 8):** With the project file successfully patched, this step
#     will build the entire PJSIP solution. A full success is now expected.
# =================================================================================================

name: Build C++ and Create Release

on:
  push:
    branches: [ "main" ]

jobs:
  build:
    runs-on: windows-latest
    outputs:
      version: ${{ steps.generate_version.outputs.VERSION }}

    steps:
    - name: 1. Checkout MicroSip Repository
      uses: actions/checkout@v4
      with:
        repository: sufficit/sufficit-microsip
        path: sufficit-microsip

    - name: 2. Clone PJSIP Repository
      uses: actions/checkout@v4
      with:
        repository: pjsip/pjproject
        path: pjproject
    
    - name: 3. Clone Opus into PJSIP third_party
      uses: actions/checkout@v4
      with:
        repository: xiph/opus
        path: pjproject/third_party/opus

    - name: 4. Restructure PJSIP directories
      shell: pwsh
      run: |
        Move-Item -Path ${{ github.workspace }}\pjproject\* -Destination ${{ github.workspace }}\
        Remove-Item -Path ${{ github.workspace }}\pjproject -Recurse -Force

    - name: 5. Create PJSIP config_site.h
      shell: pwsh
      run: |
        <span class="math-inline">config \= @"
\#define PJ\_WIN32 1
\#include <windows\.h\>
\#define PJ\_HAS\_IPV6 1
\#define PJSUA\_MAX\_ACC 10
\#define PJSUA\_MAX\_CALLS 32
\#define PJMEDIA\_HAS\_G729\_CODEC 1
\#define PJMEDIA\_HAS\_ILBC\_CODEC 1
\#define PJMEDIA\_HAS\_SPEEX\_CODEC 1
\#define PJMEDIA\_HAS\_SPEEX\_AEC 1
\#define PJMEDIA\_HAS\_OPUS\_CODEC 1
\#define PJMEDIA\_HAS\_VIDEO 0
\#define PJMEDIA\_VIDEO\_DEV\_HAS\_SDL 0
\#define PJMEDIA\_VIDEO\_DEV\_HAS\_DSHOW 0
\#define PJ\_LOG\_MAX\_LEVEL 3
\#define PJMEDIA\_AUD\_MAX\_DEVS 64
"@
Set\-Content \-Path "</span>{{ github.workspace }}\pjlib\include\pj\config_site.h" -Value $config

    - name: 6. Patch pjmedia-codec.vcxproj to add Opus include path
      shell: pwsh
      run: |
        $projFile = "pjmedia/build/pjmedia_codec.vcxproj"
        echo "Loading project file: $projFile"
        $xml = [xml](Get-Content <span class="math-inline">projFile\)
\# In PowerShell double\-quoted strings, the '</span>' character must be escaped with a backtick (`) to be treated literally.
        $conditionString = "'`$(Configuration)`|`$(Platform)'=='Release|Win32'"
        
        $itemDefGroup = $xml.Project.ItemDefinitionGroup | Where-Object { $_.Condition -eq $conditionString }
        
        if ($itemDefGroup) {
            $includeDirsNode = $itemDefGroup.ClCompile.AdditionalIncludeDirectories
            $currentIncludes = $includeDirsNode.'#text'
            $newIncludes = $currentIncludes + ";../../third_party/opus/include"
            $includeDirsNode.'#text' = $newIncludes
            echo "Successfully patched include path. New path is: $newIncludes"
        } else {
            echo "ERROR: Could not find 'Release|Win32' configuration in $projFile"
            exit 1
        }
        
        $xml.Save($projFile)
        echo "Saved updated project file: $projFile"
        
    - name: 7. Add MSBuild to path
      uses: microsoft/setup-msbuild@v2

    - name: 8. Build PJSIP and ALL its Dependencies
      shell: pwsh
      run: |
        echo "Building the entire PJSIP solution..."
        msbuild.exe pjproject-vs14.sln /p:Configuration=Release /p:Platform=Win32

    - name: 9. Copy all required libraries for MicroSIP
      shell: pwsh
      run: |
        echo "Copying PJSIP libraries..."
        Copy-Item -Path lib/libpjproject-*.lib -Destination sufficit-microsip/lib/ -ErrorAction SilentlyContinue
        
        echo "Copying third-party libraries built by PJSIP..."
        $dest_dir = "sufficit-microsip/third_party/lib"
        New-Item -ItemType Directory -Force -Path $dest_dir
        Copy-Item -Path third_party/lib/*.lib -Destination $dest_dir -ErrorAction SilentlyContinue
        
        echo "Copying Opus library to its specific folder..."
        $opus_dir = "sufficit-microsip/third_party/opus/Win32"
        New-Item -ItemType Directory -Force -Path $opus_dir
        Copy-Item -Path third_party/lib/libopus-*.lib -Destination "$opus_dir/opus.lib" -ErrorAction SilentlyContinue

    - name: 10. Generate Version Tag
      id: generate_version
      working-directory: ./sufficit-microsip
      run: |
        <span class="math-inline">VERSION\="v</span>(Get-Date -Format 'yyyy.MM.dd').${{ github.run_number }}"
        echo "VERSION=$VERSION" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
      
    - name: 11. Build the final project
      working-directory: ./sufficit-microsip
      run: msbuild.exe /p:Configuration=Release /p:Platform=x86 microsip.vcxproj

    - name: 12. Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: microsip-build
        path: sufficit-microsip/Release/microsip.exe

  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - name: 1. Download build artifact
      uses: actions/download-artifact@v4
      with:
        name: microsip-build

    - name: 2. Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.build.outputs.version }}
        name: "Release ${{ needs.build.outputs.version }}"
        body: |
          Versão compilada automaticamente a partir do último push para a branch main.
        files: microsip.exe