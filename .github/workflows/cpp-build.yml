# =================================================================================================
# GITHUB ACTIONS WORKFLOW FOR BUILDING THE SUFFICIT/SUFFICIT-MICROSIP PROJECT
#
# WORKFLOW VERSION: 13 (Final Fix)
#
# Author: Hugo Castro de Deco, Sufficit
# Collaboration: Gemini AI for Google
# Date: June 12, 2025
#
# == Logic and Execution Steps (Final Reviewed Version) ==
#
# This workflow represents a complete, reviewed solution to the build complexities.
#
# 1.  **Build Dependencies (Steps 1-9):** This part is now validated. It successfully checks out
#     all source code, creates the necessary PJSIP configuration, builds Opus independently,
#     and then builds all required PJSIP libraries.
#
# 2.  **Prepare Final Linkage (Step 10):** THIS IS THE CORRECTED STEP. Previous versions failed
#     to correctly place the final libraries. This step now uses explicit commands to:
#       a) Copy ALL generated libraries to the location expected by microsip.vcxproj.
#       b) Explicitly RENAME the main pjproject library to include the "-Static" suffix.
#       c) Explicitly copy the opus.lib to its correct final directory.
#     This is designed to solve the final LNK1104 and LNK1181 errors.
#
# 3.  **Final Build (Step 12):** With all libraries correctly named and placed, the final
#     project linkage is expected to succeed.
# =================================================================================================

name: Build C++ and Create Release

on:
  push:
    branches: [ "main" ]

jobs:
  build:
    runs-on: windows-latest
    outputs:
      version: ${{ steps.generate_version.outputs.VERSION }}

    steps:
    - name: 1. Checkout MicroSip Repository
      uses: actions/checkout@v4
      with:
        repository: sufficit/sufficit-microsip
        path: sufficit-microsip

    - name: 2. Clone PJSIP Repository
      uses: actions/checkout@v4
      with:
        repository: pjsip/pjproject
        path: pjproject
    
    - name: 3. Clone Opus Repository
      uses: actions/checkout@v4
      with:
        repository: xiph/opus
        path: opus-source

    - name: 4. Restructure PJSIP directories
      shell: pwsh
      run: |
        Move-Item -Path ${{ github.workspace }}\pjproject\* -Destination ${{ github.workspace }}\
        Remove-Item -Path ${{ github.workspace }}\pjproject -Recurse -Force

    - name: 5. Create PJSIP config_site.h
      shell: pwsh
      run: |
        $config = @"
        #define PJ_WIN32 1
        #include <windows.h>
        #define PJ_HAS_IPV6 1
        #define PJSUA_MAX_ACC 10
        #define PJSUA_MAX_CALLS 32
        #define PJMEDIA_HAS_G729_CODEC 1
        #define PJMEDIA_HAS_ILBC_CODEC 1
        #define PJMEDIA_HAS_SPEEX_CODEC 1
        #define PJMEDIA_HAS_SPEEX_AEC 1
        #define PJMEDIA_HAS_OPUS_CODEC 1
        #define PJMEDIA_HAS_VIDEO 0
        #define PJMEDIA_VIDEO_DEV_HAS_SDL 0
        #define PJMEDIA_VIDEO_DEV_HAS_DSHOW 0
        #define PJ_LOG_MAX_LEVEL 3
        #define PJMEDIA_AUD_MAX_DEVS 64
        "@
        Set-Content -Path "${{ github.workspace }}\pjlib\include\pj\config_site.h" -Value $config

    - name: 6. Add MSBuild to path
      uses: microsoft/setup-msbuild@v2

    - name: 7. Build Opus Library (Independent)
      shell: pwsh
      run: |
        echo "Building Opus with CMake..."
        cmake -S opus-source -B opus-build -G "Visual Studio 17 2022" -A Win32
        cmake --build opus-build --config Release

    - name: 8. Prepare Opus Artifacts for PJSIP
      shell: pwsh
      run: |
        echo "Placing Opus headers and libraries for PJSIP build..."
        New-Item -ItemType Directory -Force -Path "third_party/opus"
        Copy-Item -Path opus-source/include/. -Destination third_party/opus -Recurse
        New-Item -ItemType Directory -Force -Path "third_party/lib"
        Copy-Item -Path "opus-build/Release/opus.lib" -Destination "third_party/lib/libopus.a"

    - name: 9. Build PJSIP Libraries
      shell: pwsh
      continue-on-error: true
      run: |
        echo "Building the entire PJSIP solution..."
        msbuild.exe pjproject-vs14.sln /p:Configuration=Release /p:Platform=Win32

    - name: 10. Copy and Prepare All Libraries for Final Build
      shell: pwsh
      run: |
        echo "--- Preparing all required libraries for MicroSIP ---"
        
        # 1. Create the destination directories inside the microsip project folder
        $microsip_lib_dir = "sufficit-microsip/lib"
        $microsip_opus_dir = "sufficit-microsip/third_party/opus/Win32"
        New-Item -ItemType Directory -Force -Path $microsip_lib_dir
        New-Item -ItemType Directory -Force -Path $microsip_opus_dir

        # 2. Copy the independently-built opus.lib to where microsip.vcxproj expects it
        Copy-Item -Path "opus-build/Release/opus.lib" -Destination $microsip_opus_dir
        echo "Copied opus.lib to $microsip_opus_dir"

        # 3. Copy the main aggregated PJSIP library and RENAME it to the static version
        $pjlib_source = "lib/libpjproject-i386-Win32-vc14-Release.lib"
        $pjlib_dest_renamed = "$microsip_lib_dir/libpjproject-i386-Win32-vc14-Release-Static.lib"
        if (Test-Path $pjlib_source) {
            Copy-Item -Path $pjlib_source -Destination $pjlib_dest_renamed
            echo "Copied and Renamed $pjlib_source to $pjlib_dest_renamed"
        } else {
            echo "FATAL: Main PJSIP library not found at $pjlib_source"
            exit 1
        }
      
    - name: 11. Generate Version Tag
      id: generate_version
      working-directory: ./sufficit-microsip
      run: |
        $VERSION="v$(Get-Date -Format 'yyyy.MM.dd').${{ github.run_number }}"
        echo "VERSION=$VERSION" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
      
    - name: 12. Build the final project
      working-directory: ./sufficit-microsip
      run: msbuild.exe /p:Configuration=Release /p:Platform=x86 microsip.vcxproj

    - name: 13. Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: microsip-build
        path: sufficit-microsip/Release/microsip.exe

  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - name: 1. Download build artifact
      uses: actions/download-artifact@v4
      with:
        name: microsip-build

    - name: 2. Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.build.outputs.version }}
        name: "Release ${{ needs.build.outputs.version }}"
        body: |
          Versão compilada automaticamente a partir do último push para a branch main.
        files: microsip.exe