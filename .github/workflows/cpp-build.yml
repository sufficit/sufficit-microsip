# =================================================================================================
# GITHUB ACTIONS WORKFLOW FOR BUILDING THE SUFFICIT/SUFFICIT-MICROSIP PROJECT
#
# Author: Hugo Castro de Deco, Sufficit
# Collaboration: Gemini AI for Google
# Date: June 15, 2025
# Version: 57 (Improved Opus release asset download to be more flexible with asset naming)
#
# This header should be updated keeping the same format on every interaction.
# Static things and recomendations for AI:
#
#  1. Comments in this file are always in english
#  2. Version has to be updated by each IA interatiction
#  3. Below this section the AI should explain every success step on build proccess
#  4. In order to avoid syntax errors, and it should never be ignored, we have two more files on repository root:
#   - `config_site.h`: used for includes and variables declarations
#   - `scripts/build_pjsip.ps1`: the definitive build script (with underscore)
#  5. Build OPUS and PJSIP With OPUS (This is a general instruction)
#  6. Do not change this header structure
#
# Above this line the should never forget.
#
# == Explanation of Build Steps ==
#
# This workflow is the definitive version. It uses a separate script for the PJSIP
# build and has simplified, robust pathing by checking out the main repo to the root
# of the workspace. This avoids all previous path resolution and script execution errors.
# The compiled Opus library (opus.lib) will be located in the 'dist/lib' directory
# alongside other PJSIP libraries after the "Prepare Libraries for Final Build" step.
# =================================================================================================

name: Build C++ and Create Release

on:
  push:
    branches: [ "main" ]

jobs:
  build:
    runs-on: windows-latest
    outputs:
      version: ${{ steps.generate_version.outputs.VERSION }}

    steps:
    - name: 1. Checkout Main Repository to root
      uses: actions/checkout@v4
      # By not specifying a 'path', the repo is checked out to the workspace root, simplifying all subsequent paths.

    - name: 2. Clone PJSIP Repository
      uses: actions/checkout@v4
      with:
        repository: pjsip/pjproject
        path: pjproject
    
    - name: 3. Prepare Distribution Directory
      shell: pwsh
      run: |
        echo "--- Creating distribution directory for libraries ---"
        $dist_dir = "dist/lib"
        New-Item -ItemType Directory -Force -Path $dist_dir

    - name: 4. Copy PJSIP config_site.h
      shell: pwsh
      run: Copy-Item -Path "./config_site.h" -Destination "pjproject/pjlib/include/pj/config_site.h"

    - name: 5. Download and Extract Pre-compiled Opus Libraries and Headers
      shell: pwsh
      run: |
        $releaseApiUrl = "https://api.github.com/repos/sufficit/opus/releases/latest"
        $response = Invoke-RestMethod -Uri $releaseApiUrl
        
        # Find the asset that contains "opus" and ends with ".zip"
        $asset = $response.assets | Where-Object { $_.name -like '*opus*.zip' } | Select-Object -First 1
        $assetUrl = $asset.browser_download_url
        $assetName = $asset.name

        if (-not $assetUrl) {
            Write-Host "##[error]Error: No suitable Opus .zip asset found in the latest release of sufficit/opus. Looked for names containing 'opus' and ending with '.zip'."
            exit 1
        }

        $tempDir = New-Item -ItemType Directory -Path "opus-extracted" -Force
        $zipPath = Join-Path -Path $tempDir -ChildPath $assetName

        Write-Host "Downloading Opus release from: $assetUrl (Asset Name: $assetName)"
        Invoke-WebRequest -Uri $assetUrl -OutFile $zipPath

        Write-Host "Extracting $zipPath to $tempDir"
        Expand-Archive -Path $zipPath -DestinationPath $tempDir -Force

        # Define target paths
        $distDir = "dist/lib" # This directory is created in step 3
        $pjIncludeOpusDir = "pjproject/pjlib/include/pj/opus"

        # Create necessary Opus include directory inside PJSIP
        New-Item -ItemType Directory -Path $pjIncludeOpusDir -Force

        # The extracted structure might vary. We need to find opus.lib and the include directory.
        # Let's search for opus.lib directly within the extracted contents.
        $foundOpusLib = Get-ChildItem -Path $tempDir -Filter "opus.lib" -Recurse | Select-Object -First 1

        if ($foundOpusLib) {
            Copy-Item -Path $foundOpusLib.FullName -Destination $distDir
            Write-Host "Copied opus.lib from $($foundOpusLib.FullName) to $distDir"
        } else {
            Write-Host "##[error]Error: opus.lib not found within the extracted contents of the Opus release."
            exit 1
        }

        # Let's search for the 'include' directory containing opus.h
        $foundOpusHeadersDir = Get-ChildItem -Path $tempDir -Filter "opus.h" -Recurse | Select-Object -ExpandProperty DirectoryName | Select-Object -First 1

        if ($foundOpusHeadersDir) {
            Copy-Item -Path (Join-Path -Path $foundOpusHeadersDir -ChildPath "*.h") -Destination $pjIncludeOpusDir
            Write-Host "Copied Opus headers from $($foundOpusHeadersDir) to $pjIncludeOpusDir"
        } else {
            Write-Host "##[warning]Warning: Opus 'opus.h' header file not found within the extracted contents of the Opus release. Headers might be missing."
        }

    - name: 6. Add MSBuild to path
      uses: microsoft/setup-msbuild@v2

    - name: 7. Patch PJSIP pjmedia_codec.vcxproj for Opus include path
      shell: pwsh
      run: |
        $patch_script_path = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "scripts/patch.ps1"
        $pjmedia_codec_vcxproj_path = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "pjproject/pjmedia/build/pjmedia_codec.vcxproj"
        Write-Host "Executing patch script: $patch_script_path on $pjmedia_codec_vcxproj_path"
        pwsh.exe -File $patch_script_path -ProjFile $pjmedia_codec_vcxproj_path

    - name: 8. Build PJSIP Solution
      shell: pwsh
      run: |
        # Define absolute paths, now from the workspace root.
        # The Opus include path is no longer passed here, as headers are copied directly.
        $sln_path = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "pjproject/pjproject-vs14.sln"
        $script_path = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "scripts/build_pjsip.ps1"
        
        Write-Host "Executing script: $script_path"
        
        # Call the build script using its absolute path and the '-File' operator.
        # It's no longer necessary to pass OpusIncludePath to build_pjsip.ps1
        # because the headers are now placed directly in PJSIP's include structure.
        pwsh.exe -File $script_path -SlnFile $sln_path

    - name: 9. Prepare Libraries for Final Build
      shell: pwsh
      run: |
        echo "--- Collecting all libraries for MicroSIP ---"
        # dist/lib is already created in step 3
        Copy-Item -Path pjproject/lib/*.lib -Destination $dist_dir
        # Opus library (opus.lib) is already copied to dist/lib in step 5, so no need to copy again from opus-build.
        
    - name: 10. Generate Version Tag
      id: generate_version
      shell: bash
      run: echo "VERSION=v$(date +'%Y.%m.%d').${{ github.run_number }}" >> $GITHUB_OUTPUT
      
    - name: 11. Build the final project
      shell: pwsh
      # Now executing from the root, as checkout was simplified.
      run: msbuild.exe microsip.vcxproj /p:Configuration=Release /p:Platform=x86 /p:AdditionalLibraryDirectories="./dist/lib"

    - name: 12. Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: microsip-build
        # The artifact path is also simpler now.
        path: Release/microsip.exe