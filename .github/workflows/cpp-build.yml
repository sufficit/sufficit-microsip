# =================================================================================================
# GITHUB ACTIONS WORKFLOW FOR BUILDING THE SUFFICIT/SUFFICIT-MICROSIP PROJECT
#
# WORKFLOW VERSION: 26 (Dynamically fix patch script)
#
# Author: Hugo Castro de Deco, Sufficit
# Collaboration: Gemini AI for Google
# Date: June 13, 2025
# 
# This header should be updated keeping the same format on every interaction.
# Static things and recomendations for AI:
#  1º Comments in this file are always in english
#  2º WORKFLOW VERSION has to be updated by each IA interatiction
#  3º Bellow this section the AI should explain every success step on build proccess
#  4º In Order to avoid syntax errors, and it should never be ignored, we have two more files on repository root:
#   - `config_site.h`: used for includes and variables declarations
#   - `patch.ps1`: powershell script  
#  Above this line the AI should never forget.
#
# == Explanation of Build Steps ==
#
# This workflow version fixes the root cause of the C1083 compile error. The issue was a
# typo in the filename inside the `patch.ps1` script ('pjmedia-codec.vcxproj' instead of
# 'pjmedia_codec.vcxproj'). Since we cannot edit the source file, this workflow now
# dynamically corrects the script in memory before executing it.
#
# 1.  **Setup & Checkout**: Checks out all necessary repositories.
#
# 2.  **Configuration and Script Patching**: Copies the `config_site.h` to the PJSIP
#     directory. It then reads the `patch.ps1` script, replaces the incorrect project
#     filename with the correct one, and saves the corrected script.
#
# 3.  **Run PJSIP Patch**: Executes the now-corrected `patch.ps1` script. This successfully
#     modifies the `pjmedia_codec.vcxproj` file to include the path to the Opus headers.
#
# 4.  **Build Dependencies & Main Project**: With the project files correctly patched, the
#     workflow proceeds to build Opus, then PJSIP (without needing extra command-line
#     parameters), and finally the main MicroSIP application.
#
# 5.  **Artifact & Release**: Packages the final `microsip.exe` and creates a GitHub Release.
# =================================================================================================

name: Build C++ and Create Release

on:
  push:
    branches: [ "main" ]

jobs:
  build:
    runs-on: windows-latest
    outputs:
      version: ${{ steps.generate_version.outputs.VERSION }}

    steps:
    - name: 1. Checkout Main Repository
      uses: actions/checkout@v4
      with:
        path: sufficit-microsip

    - name: 2. Clone PJSIP Repository
      uses: actions/checkout@v4
      with:
        repository: pjsip/pjproject
        path: pjproject
    
    - name: 3. Clone Opus Repository
      uses: actions/checkout@v4
      with:
        repository: xiph/opus
        path: opus-source

    - name: 4. Configure PJSIP and Fix Patch Script
      shell: pwsh
      run: |
        # 4.1. Copy the PJSIP configuration file from our repo
        Copy-Item -Path "sufficit-microsip/config_site.h" -Destination "pjproject/pjlib/include/pj/config_site.h"
        Write-Host "Copied config_site.h to PJSIP."

        # 4.2. Fix the typo in the patch script (hyphen vs underscore) before running it
        $patchScriptPath = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "sufficit-microsip/patch.ps1"
        (Get-Content $patchScriptPath) -replace 'pjmedia-codec.vcxproj', 'pjmedia_codec.vcxproj' | Set-Content $patchScriptPath
        Write-Host "Dynamically corrected the filename in patch.ps1."

    - name: 5. Run PJSIP Patch Script
      shell: pwsh
      working-directory: ./pjproject
      run: |
        # This script now has the correct .vcxproj filename and will patch the project successfully.
        ../sufficit-microsip/patch.ps1

    - name: 6. Build Opus Library
      shell: pwsh
      run: |
        cmake -S opus-source -B opus-build -G "Visual Studio 17 2022" -A Win32
        cmake --build opus-build --config Release

    - name: 7. Add MSBuild to path
      uses: microsoft/setup-msbuild@v2

    - name: 8. Build PJSIP Solution
      shell: pwsh
      run: |
        # Now we can build the solution without extra parameters,
        # because the patch script correctly modified the project file.
        msbuild.exe pjproject/pjproject-vs14.sln /p:Configuration=Release /p:Platform=Win32

    - name: 9. Prepare Libraries for Final Build
      shell: pwsh
      run: |
        echo "--- Collecting all libraries for MicroSIP ---"
        $dist_dir = "dist/lib"
        New-Item -ItemType Directory -Force -Path $dist_dir
        Copy-Item -Path pjproject/lib/*.lib -Destination $dist_dir
        Copy-Item -Path opus-build/Release/opus.lib -Destination $dist_dir
        echo "Libraries collected in $dist_dir"
        Get-ChildItem $dist_dir
        
    - name: 10. Generate Version Tag
      id: generate_version
      shell: bash
      run: echo "VERSION=v$(date +'%Y.%m.%d').${{ github.run_number }}" >> $GITHUB_OUTPUT
      
    - name: 11. Build the final project
      working-directory: ./sufficit-microsip
      run: |
        msbuild.exe microsip.vcxproj /p:Configuration=Release /p:Platform=x86 /p:AdditionalLibraryDirectories="../dist/lib"

    - name: 12. Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: microsip-build
        path: sufficit-microsip/Release/microsip.exe

  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - name: 1. Download build artifact
      uses: actions/download-artifact@v4
      with:
        name: microsip-build
    - name: 2. Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.build.outputs.version }}
        name: "Release ${{ needs.build.outputs.version }}"
        body: "Versão compilada automaticamente a partir do último push para a branch main."
        files: microsip.exe
