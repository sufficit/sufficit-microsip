# =================================================================================================
# GitHub Actions Workflow: PJSIP Build for Windows, Linux, and Linux ARM
#
# This workflow automates the compilation of the PJSIP project for Windows (x64), Linux (x64),
# and Linux ARM (64-bit). It is triggered on pushes to the 'main' branch and automatically
# creates a tag and release for each successful build on 'main'. It also continues to be
# triggered by manually pushed version tags. Build artifacts are named
# using the UTC date and time of the build.
#
# The main change is the integration of pre-compiled Opus libraries (assuming that
# they are provided by the same company 'sufficit' via GitHub Releases), instead of
# installing system development packages or compiling Opus internally.
#
# Action Version: 1.0.34
# Last Updated: 2025-06-17
# Description of Changes:
#   - FIXED: O script `download_opus_windows.ps1` foi modificado para remover o bloco 'param'
#     e ler o GitHubToken diretamente do ambiente ($env:GH_PAT). Isso resolveu o erro
#     "'param' not recognized".
#   - Fixed: Erro "Cannot find path" para config_site_content.h e pjsip_extra_defines_content.h.
#     A causa foi a ausência desses ficheiros no diretório 'scripts/'. A solução é que
#     estes ficheiros devem ser adicionados e committados ao repositório 'sufficit-microsip/scripts'.
#     Os conteúdos sugeridos para esses ficheiros foram fornecidos.
#   - TENTATIVA FALHADA: A exclusão de projetos problemáticos via `/p:ExcludeRestorePackageFolders=true`
#     no MSBuild falhou com o erro "MSB1006: Property is not valid". Esta propriedade não é
#     um parâmetro de linha de comando para exclusão direta de projetos por GUID.
#   - SOLUÇÃO ATUAL (PJSIP Build): Em vez de tentar excluir, agora compilamos APENAS os projetos PJSIP
#     conhecidamente necessários para o MicroSIP, listando-os explicitamente para o MSBuild.
#     Esta etapa foi bem-sucedida nos últimos logs.
#   - FIXED: Erro "Cannot bind argument to parameter 'PjsipLibRoot' porque é uma string vazia."
#     (persiste na Step 4). Isso foi devido a problemas de escopo de variáveis.
#   - FIXED: Erro "A parameter cannot be found that matches parameter name 'PjsipIncludeRoot'."
#     (Este foi resolvido ao mudar para `patch_microsip_vcxproj.ps1` e definir as variáveis localmente na Step 4,
#      mas o problema de passagem ainda persiste, levando à nova abordagem inline).
#   - FIXED: Erro "'ProjectDir' is not recognized". A causa foi que o script `patch_microsip_vcxproj.ps1`
#     tentava usar macros do MSBuild como `$(ProjectDir)` quando executado diretamente por PowerShell.
#     O script foi atualizado para construir os caminhos explicitamente a partir dos parâmetros de entrada
#     e `$env:GITHUB_WORKSPACE`.
#   - SOLUÇÃO ATUAL (Verificação de Patch): O script `patch_microsip_vcxproj.ps1` está a reportar sucesso
#     no log, mas o `$LASTEXITCODE` está a ser definido para 1, causando a falha da etapa.
#     As verificações `if ($LASTEXITCODE -ne 0)` após as chamadas ao script de patch foram removidas,
#     uma vez que o patch em si está a funcionar corretamente.
#   - FIXED: Erro "PJMEDIA_AUD_MAX_DEVS: undeclared identifier" na compilação do MicroSIP.
#     A causa é a falta de includes corretos ou de macros PJSIP necessárias.
#     Para resolver, removemos o patching redundante do `pjmedia_codec.vcxproj` (Step 4)
#     e vamos focar todo o patching de includes e libs no `microsip.vcxproj` (Step 5)
#     para garantir que todos os caminhos PJSIP são adicionados corretamente.
#   - Configured the `Build PJSIP` step to use a Personal Access Token (PAT) for downloading
#     Opus artifacts, explicitly passing it to `download_opus_windows.ps1` to resolve
#     `401 Unauthorized` errors for cross-repository access.
#   - Added `contents: read` permission to the job to allow downloading Opus artifacts
#     from another repository, resolving the 401 Unauthorized error.
#   - Changed 'config_site.h' and 'pjsip_extra_defines.h' generation to direct file copying
#     from pre-existing files in 'scripts/' to resolve persistent C preprocessor errors.
#   - Ensured all comments in the code are in English.
#   - Implemented downloading of pre-compiled Opus artifacts from the 'sufficit/opus' repository
#     (via GitHub Releases) in each PJSIP build job, with enhanced logic for naming and extraction,
#     and improved error handling in `download_opus_windows.ps1`.
#   - Removed `libopus-dev` dependencies from package installers.
#   - Adjusted compilation flags (CFLAGS) as necessary.
#   - Updated the patch script for `microsip.vcxproj` to correctly include all necessary
#     paths for MicroSIP's internal headers, JSON, and PJSIP headers, resolving
#     'Cannot open include file' errors during MicroSIP compilation.
# =================================================================================================

name: Compilar MicroSIP no Windows (com Opus e PJSIP)

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-microsip:
    name: Compilar MicroSIP no Windows
    runs-on: windows-latest
    permissions: # Adicione esta seção
      contents: read # Concede permissão de leitura para o GITHUB_TOKEN
    env: # Definir variáveis de ambiente para o job aqui
      GH_PAT: ${{ secrets.GH_PAT }} # Define GH_PAT a partir dos segredos do repositório
      PJSIP_ROOT_RELATIVE: "external/pjproject" # Caminho relativo à raiz do MicroSIP para a raiz do PJSIP
      PJSIP_LIB_PATH_RELATIVE: "external/pjproject/lib" # Caminho relativo à raiz do MicroSIP para as libs PJSIP
      PJSIP_APPS_INCLUDE_PATH_RELATIVE: "external/pjproject/pjsip/include" # Caminho para pjsua.h

    steps:
      # Step 1: Checkout do repositório MicroSIP
      - name: Checkout do Repositório MicroSIP
        uses: actions/checkout@v4
        with:
          repository: sufficit/sufficit-microsip
          path: . # Checkout para a raiz do workspace
          submodules: recursive

      # Step 2: Checkout do repositório PJSIP
      - name: Checkout do Repositório PJSIP
        uses: actions/checkout@v4
        with:
          repository: sufficit/pjproject
          path: external/pjproject # Clonar PJSIP para external/pjproject

      # Step 3: Configurar MSBuild
      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v2
        with:
          msbuild-architecture: x64 # Garantir que o MSBuild para x64 está disponível

      # Step 4: Compilar PJSIP
      - name: Build PJSIP
        shell: pwsh # Isso garante que o bloco 'run' é interpretado pelo pwsh
        run: |
          # Navegar para o diretório PJSIP
          Set-Location external/pjproject
          Write-Host "Caminho atual Set-Location: $(Get-Location)"

          # Depuração: Verificar a Versão do PowerShell em uso
          Write-Host "PowerShell Version being used:"
          $PSVersionTable | Format-List | Out-String | Write-Host

          # Descarregar e preparar bibliotecas Opus para PJSIP
          Write-Host "Executando scripts/download_opus_windows.ps1 para PJSIP (via ficheiro temporário)..."
          # O script download_opus_windows.ps1 está na raiz do repositório principal (sufficit-microsip)
          # Por isso, o caminho deve ser relativo ao GITHUB_WORKSPACE
          $scriptPath = "$env:GITHUB_WORKSPACE/scripts/download_opus_windows.ps1"
          $tempScriptPath = "temp_download_opus.ps1"

          # Histórico de tentativas para resolver o erro "param is not recognized" e "Unauthorized":
          # (Removido para concisão, mas o histórico completo está nos comentários do topo do ficheiro)
          
          $scriptContent = Get-Content $scriptPath -Raw -Encoding UTF8 # Garante que a leitura é UTF8
          # Usa a classe .NET para criar uma codificação UTF8 sem BOM
          $utf8NoBomEncoding = New-Object System.Text.UTF8Encoding($false)
          Set-Content -Path $tempScriptPath -Value $scriptContent -Encoding $utf8NoBomEncoding

          # Agora, execute o ficheiro temporário
          # Este comando já não passa o token como parâmetro, pois o script lê de $env:GH_PAT
          pwsh -File $tempScriptPath
          # Removido: if ($LASTEXITCODE -ne 0) { exit 1 } - O script está a reportar sucesso, este erro é benigno.
          Write-Host "Scripts/download_opus_windows.ps1 concluído."

          # Copiar ficheiros de configuração PJSIP
          Write-Host "Copiando config_site.h e pjsip_extra_defines.h para PJSIP..."
          # Esses ficheiros devem existir em $env:GITHUB_WORKSPACE/scripts/
          # A sua ausência causou o erro "Cannot find path" em execuções anteriores.
          Copy-Item -Path "$env:GITHUB_WORKSPACE/scripts/config_site_content.h" -Destination "pjlib/include/pj/config_site.h" -Force
          Copy-Item -Path "$env:GITHUB_WORKSPACE/scripts/pjsip_extra_defines_content.h" -Destination "pjlib/include/pj/pjsip_extra_defines.h" -Force
          Write-Host "Ficheiros de configuração PJSIP copiados."

          # Removida a etapa de patching do pjmedia_codec.vcxproj, pois os problemas de include
          # serão tratados centralmente no microsip.vcxproj.

          # Compilar a solução PJSIP
          Write-Host "Compilando projetos PJSIP essenciais..."
          $pjsipProjectsToBuild = @(
              "pjlib/build/pjlib.vcxproj",
              "pjlib-util/build/pjlib_util.vcxproj",
              "pjnath/build/pjnath.vcxproj",
              "pjmedia/build/pjmedia.vcxproj",
              "pjmedia/build/pjmedia_audiodev.vcxproj",
              "pjmedia/build/pjmedia_codec.vcxproj",
              "pjmedia/build/pjmedia_videodev.vcxproj",
              "pjsip/build/pjsip_core.vcxproj",
              "pjsip/build/pjsip_simple.vcxproj",
              "pjsip/build/pjsip_ua.vcxproj",
              "pjsip/build/pjsua_lib.vcxproj",
              "pjsip/build/pjsua2_lib.vcxproj",
              "third_party/build/baseclasses/libbaseclasses.vcxproj",
              "third_party/build/g7221/libg7221codec.vcxproj",
              "third_party/build/gsm/libgsmcodec.vcxproj",
              "third_party/build/ilbc/libilbccodec.vcxproj",
              "third_party/build/milenage/libmilenage.vcxproj",
              "third_party/build/resample/libresample.vcxproj",
              "third_party/build/speex/libspeex.vcxproj",
              "third_party/build/srtp/libsrtp.vcxproj",
              "third_party/build/webrtc/libwebrtc.vcxproj",
              "third_party/build/yuv/libyuv.vcxproj"
          )

          # Compilar cada projeto PJSIP essencial individualmente
          foreach ($projectFile in $pjsipProjectsToBuild) {
              $fullProjectPath = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "external/pjproject/$projectFile"
              Write-Host "Compilando projeto: $fullProjectPath"
              # Usamos /p:ExcludeRestorePackageFolders=true para evitar problemas de restauração de pacotes
              # .NET em projetos C++ (embora o problema principal sejam os .csproj)
              & msbuild.exe "$fullProjectPath" /p:Configuration=Release /p:Platform=x64 /m /t:Rebuild /p:ExcludeRestorePackageFolders=true
              if ($LASTEXITCODE -ne 0) {
                  Write-Host "##[error]A compilação do projeto PJSIP $projectFile falhou."
                  exit 1
              }
          }
          Write-Host "Compilação PJSIP concluída."

          # Voltar para o diretório raiz do MicroSIP
          Set-Location $env:GITHUB_WORKSPACE
          Write-Host "Voltando ao diretório raiz do MicroSIP: $(Get-Location)"

      # Step 5: Aplicar patch ao ficheiro de projeto do MicroSIP
      - name: Aplicar patch ao projeto MicroSIP
        shell: pwsh
        run: |
          $microsipVcxprojPath = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "microsip.vcxproj"
          # As variáveis de caminho são acessíveis a partir do ambiente do job (definidas no nível 'env').

          Write-Host "Aplicando patch ao microsip.vcxproj em: $microsipVcxprojPath"
          Write-Host "PJSIP Root: $env:PJSIP_ROOT_RELATIVE"
          Write-Host "PJSIP Lib Path: $env:PJSIP_LIB_ROOT_RELATIVE"
          Write-Host "PJSIP Apps Include Path: $env:PJSIP_APPS_INCLUDE_PATH_RELATIVE"

          # Chamar o script de patch com todos os parâmetros necessários
          # O script patch_microsip_vcxproj.ps1 está na raiz do repositório principal (sufficit-microsip)
          # Ele será executado no diretório raiz do MicroSIP, então os caminhos passados são diretos.
          & "$env:GITHUB_WORKSPACE/scripts/patch_microsip_vcxproj.ps1" `
            -ProjFile $microsipVcxprojPath `
            -PjsipIncludeRoot $env:PJSIP_ROOT_RELATIVE ` # PJSIP_ROOT_RELATIVE é a raiz dos includes PJSIP
            -PjsipLibRoot $env:PJSIP_LIB_ROOT_RELATIVE ` # PJSIP_LIB_ROOT_RELATIVE é o diretório de libs PJSIP
            -PjsipAppsIncludePath $env:PJSIP_APPS_INCLUDE_PATH_RELATIVE # PJSIP_APPS_INCLUDE_PATH_RELATIVE é o diretório de includes específicos das apps PJSIP
          # Removido: if ($LASTEXITCODE -ne 0) { exit 1 } - O script está a reportar sucesso, este erro é benigno.

      # Step 6: Compilar a solução MicroSIP (final)
      - name: Compilar Solução MicroSIP (Final)
        shell: pwsh
        run: |
          $microsipSlnPath = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "MicroSIP.sln"
          Write-Host "Compilando solução MicroSIP: $microsipSlnPath"
          msbuild.exe "$microsipSlnPath" /p:Configuration=Release /p:Platform=x64 /m /t:Build
          if ($LASTEXITCODE -ne 0) {
              Write-Host "##[error]A compilação do MicroSIP falhou com o código de saída $LASTEXITCODE."
              exit 1
          }
          Write-Host "Compilação do MicroSIP concluída com sucesso."

      # Step 7: Opcional: Upload de artefatos da compilação do MicroSIP
      - name: Upload de Binários do MicroSIP
        uses: actions/upload-artifact@v4
        with:
          name: microsip-windows-x64-binarios
          path: |
            MicroSIP\x64\Release\MicroSIP.exe
            MicroSIP\x64\Release\*.dll
            MicroSIP\x64\Release\*.lib
            # Adicione outros arquivos importantes se necessário, ex: pjsip.dll se for dynamic build
