# =================================================================================================
# GitHub Actions Workflow: PJSIP Build for Windows, Linux, and Linux ARM
#
# This workflow automates the compilation of the PJSIP project for Windows (x64), Linux (x64),
# and Linux ARM (64-bit). It is triggered on pushes to the 'main' branch and automatically
# creates a tag and release for each successful build on 'main'. It also continues to be
# triggered by manually pushed version tags. Build artifacts are named
# using the UTC date and time of the build.
#
# The main change is the integration of pre-compiled Opus libraries (assuming that
# they are provided by the same company 'sufficit' via GitHub Releases), instead of
# installing system development packages or compiling Opus internally.
#
# Action Version: 1.0.35
# Last Updated: 2025-06-17
# Description of Changes:
#   - FIXED: The `patch_microsip_vcxproj.ps1` script now correctly handles MSBuild properties
#     like `$(LibraryPath)` and `%(AdditionalLibraryDirectories)` by enclosing them in
#     single quotes to prevent PowerShell parsing errors.
#   - NEW: Added a post-build renaming step for PJSIP libraries to match the simpler
#     names expected by the MicroSIP project (e.g., `pjlib.lib` instead of `pjlib-x86_64-x64-vc14-Release.lib`).
#     This directly addresses the `LNK1181: cannot open input file 'pjlib.lib'` error.
# =================================================================================================

name: Compilar MicroSIP no Windows

on:
  push:
    branches:
      - main
    tags:
      - 'v*.*.*' # Trigger on version tags like v1.0.0

env:
  BUILD_DATE: ${{ format('{0:yyyyMMdd-HHmmss}', github.event.head_commit.timestamp) }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Automatically provided by GitHub Actions
  GH_PAT: ${{ secrets.GH_PAT }} # For accessing private repositories/releases if needed

jobs:
  build-windows:
    runs-on: windows-2022 # Use Windows Server 2022 for consistency
    steps:
      - name: Checkout Repositório Principal
        uses: actions/checkout@v4
        with:
          repository: sufficit/sufficit-microsip
          path: .
          submodules: recursive # Ensure submodules like PJSIP are checked out
          fetch-depth: 1 # Only fetch the latest commit
          token: ${{ env.GITHUB_TOKEN }}

      - name: Checkout PJSIP para Compilação
        uses: actions/checkout@v4
        with:
          repository: sufficit/pjproject # Replace with your PJSIP fork/repo
          path: external/pjproject
          token: ${{ env.GITHUB_TOKEN }} # Use default GITHUB_TOKEN for public repo, or GH_PAT for private
          submodules: false # PJSIP's submodules are not needed for pre-compiled Opus

      # Step 1: Configurar MSBuild
      - name: Configurar MSBuild
        uses: microsoft/setup-msbuild@v2
        with:
          msbuild-architecture: x64

      # Step 2: Preparar PJSIP (download Opus, configurar headers)
      - name: Preparar PJSIP
        shell: pwsh
        run: |
          # Navegar para o diretório PJSIP
          Set-Location external/pjproject
          Write-Host "Caminho atual Set-Location: $(Get-Location)"

          # Depuração: Verificar a Versão do PowerShell em uso
          Write-Host "PowerShell Version being used:"
          $PSVersionTable | Format-List | Out-String | Write-Host

          # Descarregar e preparar bibliotecas Opus para PJSIP
          Write-Host "Executando scripts/download_opus_windows.ps1 para PJSIP (via ficheiro temporário)..."
          # O script download_opus_windows.ps1 está na raiz do repositório principal (sufficit-microsip)
          # Por isso, o caminho deve ser relativo ao GITHUB_WORKSPACE
          $scriptPath = "$env:GITHUB_WORKSPACE/scripts/download_opus_windows.ps1"
          $tempScriptPath = "temp_download_opus.ps1"
          
          # Histórico de tentativas para resolver o erro "param is not recognized" e "Unauthorized":
          # - Tentativa 1: Passar token como parâmetro para o script. Falha: "A parameter cannot be found that matches parameter name 'GitHubToken'."
          # - Tentativa 2: Expor o token via variável de ambiente no workflow e ler dentro do script. Falha: "param is not recognized" (erro de parsing do PowerShell).
          # - Tentativa 3: Ler o conteúdo do script, remover o bloco 'param', e executá-lo via ficheiro temporário. SUCESSO.
          # - Tentativa 4: Adicionar o token diretamente nas variáveis de ambiente do script de build do PJSIP, e ler de $env:GH_PAT dentro do download_opus_windows.ps1.

          $scriptContent = Get-Content $scriptPath -Raw -Encoding UTF8 # Garante que a leitura é UTF8
          # Usa a classe .NET para criar uma codificação UTF8 sem BOM
          $utf8NoBomEncoding = New-Object System.Text.UTF8Encoding($false)
          Set-Content -Path $tempScriptPath -Value $scriptContent -Encoding $utf8NoBomEncoding
          
          # Agora, execute o ficheiro temporário
          # Este comando já não passa o token como parâmetro, pois o script lê de $env:GH_PAT
          pwsh -File $tempScriptPath
          Write-Host "Scripts/download_opus_windows.ps1 concluído."

          # Copiar ficheiros de configuração PJSIP
          Write-Host "Copiando config_site.h e pjsip_extra_defines.h para PJSIP..."
          # Esses ficheiros devem existir em $env:GITHUB_WORKSPACE/scripts/
          # A sua ausência causou o erro "Cannot find path" em execuções anteriores.
          Copy-Item -Path "$env:GITHUB_WORKSPACE/scripts/config_site_content.h" -Destination "pjlib/include/pj/config_site.h" -Force
          Copy-Item -Path "$env:GITHUB_WORKSPACE/scripts/pjsip_extra_defines_content.h" -Destination "pjlib/include/pj/pjsip_extra_defines.h" -Force
          Write-Host "Ficheiros de configuração PJSIP copiados."

      # Step 3: Compilar PJSIP (essencial)
      - name: Compilar PJSIP Essenciais
        shell: pwsh
        run: |
          Set-Location external/pjproject
          Write-Host "Caminho atual Set-Location: $(Get-Location)"
          
          Write-Host "Compilando projetos PJSIP essenciais..."
          $pjsipProjectsToBuild = @(
              "pjlib/build/pjlib.vcxproj",
              "pjlib-util/build/pjlib_util.vcxproj",
              "pjnath/build/pjnath.vcxproj",
              "pjmedia/build/pjmedia.vcxproj",
              "pjmedia/build/pjmedia_audiodev.vcxproj",
              "pjmedia/build/pjmedia_codec.vcxproj",
              "pjmedia/build/pjmedia_videodev.vcxproj",
              "pjsip/build/pjsip_core.vcxproj",
              "pjsip/build/pjsip_simple.vcxproj",
              "pjsip/build/pjsip_ua.vcxproj",
              "pjsip/build/pjsua_lib.vcxproj",
              "pjsip/build/pjsua2_lib.vcxproj",
              "third_party/build/baseclasses/libbaseclasses.vcxproj",
              "third_party/build/g7221/libg7221codec.vcxproj",
              "third_party/build/gsm/libgsmcodec.vcxproj",
              "third_party/build/ilbc/libilbccodec.vcxproj",
              "third_party/build/milenage/libmilenage.vcxproj",
              "third_party/build/resample/libresample.vcxproj",
              "third_party/build/speex/libspeex.vcxproj",
              "third_party/build/srtp/libsrtp.vcxproj",
              "third_party/build/webrtc/libwebrtc.vcxproj",
              "third_party/build/yuv/libyuv.vcxproj"
          )
          
          # Mapping of original PJSIP output names to desired simple names
          # Note: Opus is already renamed by download_opus_windows.ps1, so not here.
          $libRenames = @{
              "pjlib-x86_64-x64-vc14-Release.lib" = "pjlib.lib";
              "pjlib-util-x86_64-x64-vc14-Release.lib" = "pjlib-util.lib";
              "pjnath-x86_64-x64-vc14-Release.lib" = "pjnath.lib";
              "pjmedia-x86_64-x64-vc14-Release.lib" = "pjmedia.lib";
              "pjmedia-audiodev-x86_64-x64-vc14-Release.lib" = "pjmedia-audiodev.lib";
              "pjmedia-codec-x86_64-x64-vc14-Release.lib" = "pjmedia-codec.lib";
              "pjmedia-videodev-x86_64-x64-vc14-Release.lib" = "pjmedia-videodev.lib";
              "pjsip-core-x86_64-x64-vc14-Release.lib" = "pjsip-core.lib";
              "pjsip-simple-x86_64-x64-vc14-Release.lib" = "pjsip-simple.lib";
              "pjsip-ua-x86_64-x64-vc14-Release.lib" = "pjsip-ua.lib";
              "pjsua-lib-x86_64-x64-vc14-Release.lib" = "pjsua-lib.lib";
              "pjsua2-lib-x86_64-x64-vc14-Release.lib" = "pjsua2-lib.lib";
              "libbaseclasses-x86_64-x64-vc14-Release.lib" = "libbaseclasses.lib";
              "libg7221codec-x86_64-x64-vc14-Release.lib" = "libg7221codec.lib";
              "libgsmcodec-x86_64-x64-vc14-Release.lib" = "libgsmcodec.lib";
              "libilbccodec-x86_64-x64-vc14-Release.lib" = "libilbccodec.lib";
              "libmilenage-x86_64-x64-vc14-Release.lib" = "libmilenage.lib";
              "libresample-x86_64-x64-vc14-Release.lib" = "libresample.lib";
              "libspeex-x86_64-x64-vc14-Release.lib" = "libspeex.lib";
              "libsrtp-x86_64-x64-vc14-Release.lib" = "libsrtp.lib";
              "libwebrtc-x86_64-x64-vc14-Release.lib" = "libwebrtc.lib";
              "libyuv-x86_64-x64-vc14-Release.lib" = "libyuv.lib"
          }

          foreach ($projectFile in $pjsipProjectsToBuild) {
              $fullProjectPath = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "external/pjproject/$projectFile"
              Write-Host "Compilando projeto: $fullProjectPath"
              & msbuild.exe "$fullProjectPath" /p:Configuration=Release /p:Platform=x64 /m /t:Rebuild /p:ExcludeRestorePackageFolders=true
              if ($LASTEXITCODE -ne 0) {
                  Write-Host "##[error]A compilação do projeto PJSIP $projectFile falhou."
                  exit 1
              }
              
              # Rename the output .lib file
              $outputLibDir = Join-Path -Path (Split-Path -Path $fullProjectPath -Parent) -ChildPath "lib"
              $libNameWithoutSuffix = [System.IO.Path]::GetFileNameWithoutExtension($projectFile).Replace(".vcxproj", "")
              
              $originalLibNameWithSuffix = "$libNameWithoutSuffix-x86_64-x64-vc14-Release.lib"
              $originalLibPath = Join-Path -Path $outputLibDir -ChildPath $originalLibNameWithSuffix

              if ($libRenames.ContainsKey($originalLibNameWithSuffix)) {
                  $targetLibName = $libRenames[$originalLibNameWithSuffix]
                  $targetLibPath = Join-Path -Path $outputLibDir -ChildPath $targetLibName

                  if (Test-Path $originalLibPath) {
                      Write-Host "Renaming $($originalLibNameWithSuffix) to $($targetLibName)"
                      Rename-Item -Path $originalLibPath -NewName $targetLibName -Force
                  } else {
                      Write-Host "##[warning]Warning: Original library file '$($originalLibNameWithSuffix)' not found at '$($originalLibPath)'. Skipping rename."
                  }
              } else {
                  Write-Host "##[warning]Warning: No rename mapping found for '$($originalLibNameWithSuffix)'. Leaving as is."
              }
          }
          Write-Host "Compilação PJSIP concluída."
          Set-Location $env:GITHUB_WORKSPACE
          Write-Host "Voltando ao diretório raiz do MicroSIP: $(Get-Location)"

      # Step 4: Aplicar patch ao MicroSIP.vcxproj
      - name: Aplicar Patch ao MicroSIP.vcxproj
        shell: pwsh
        run: |
          $microsipVcxprojPath = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "microsip.vcxproj"
          
          # Definir caminhos absolutos como literais para passar para o script de patch
          # Isso contorna a inconsistência de passagem de variáveis de ambiente com parâmetros nomeados
          $pjsipRoot = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "external/pjproject"
          $pjsipLib = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "external/pjproject/lib"
          $pjsipAppsInclude = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "external/pjproject/pjsip/include"
          
          Write-Host "Aplicando patch ao microsip.vcxproj em: $microsipVcxprojPath"
          Write-Host "PJSIP Root: $pjsipRoot"
          Write-Host "PJSIP Lib Path: $pjsipLib"
          Write-Host "PJSIP Apps Include Path: $pjsipAppsInclude"
          
          # Chamar o script de patch com todos os parâmetros necessários
          # Passando os caminhos como literais absolutos para garantir a sua interpretação correta.
          & "$env:GITHUB_WORKSPACE/scripts/patch_microsip_vcxproj.ps1" `
            -ProjFile $microsipVcxprojPath `
            -PjsipIncludeRoot "$pjsipRoot" `
            -PjsipLibRoot "$pjsipLib" `
            -PjsipAppsIncludePath "$pjsipAppsInclude"

      # Step 5: Compilar a solução MicroSIP (final)
      - name: Compilar Solução MicroSIP (Final)
        shell: pwsh
        run: |
          $microsipSlnPath = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "MicroSIP.sln"
          Write-Host "Compilando solução MicroSIP: $microsipSlnPath"
          msbuild.exe "$microsipSlnPath" /p:Configuration=Release /p:Platform=x64 /m /t:Build
          if ($LASTEXITCODE -ne 0) {
              Write-Host "##[error]A compilação do MicroSIP falhou com o código de saída $LASTEXITCODE."
              exit 1
          }
          Write-Host "Compilação do MicroSIP concluída com sucesso."

      # Step 6: Opcional: Upload de artefatos da compilação do MicroSIP
      - name: Upload de Binários do MicroSIP
        uses: actions/upload-artifact@v4
        with:
          name: MicroSIP-windows-x64-${{ env.BUILD_DATE }}
          path: |
            C:\a\sufficit-microsip\sufficit-microsip\x64\Release\MicroSIP.exe
            C:\a\sufficit-microsip\sufficit-microsip\x64\Release\MicroSIP.pdb
          if-no-files-found: error