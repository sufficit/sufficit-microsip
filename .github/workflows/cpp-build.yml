# =================================================================================================
# GITHUB ACTIONS WORKFLOW FOR BUILDING THE SUFFICIT/SUFFICIT-MICROSIP PROJECT
#
# WORKFLOW VERSION: 22 (Definitive "No-Move" Strategy, Corrected Paths)
#
# Author: Hugo Castro de Deco, Sufficit
# Collaboration: Gemini AI for Google
# Date: June 13, 2025
#
# == Logic and Execution Steps ==
#
# This workflow ABANDONS all file-moving. It keeps each repository in its own clean
# directory and uses relative paths and a final distribution folder to link everything.
# It uses the user-provided patch.ps1 and config_site.h files.
# =================================================================================================

name: Build C++ and Create Release

on:
  push:
    branches: [ "main" ]

jobs:
  build:
    runs-on: windows-latest
    outputs:
      version: ${{ steps.generate_version.outputs.VERSION }}

    steps:
    - name: 1. Checkout Main Repository & Scripts
      uses: actions/checkout@v4
      with:
        path: sufficit-microsip

    - name: 2. Clone PJSIP Repository
      uses: actions/checkout@v4
      with:
        repository: pjsip/pjproject
        path: pjproject
    
    - name: 3. Clone Opus Repository
      uses: actions/checkout@v4
      with:
        repository: xiph/opus
        path: opus-source

    - name: 4. Prepare PJSIP Dependencies and Patch Script
      shell: pwsh
      run: |
        # Copy the user's config_site.h and patch.ps1 from the main repo checkout
        # into the pjproject directory where they will be used.
        Copy-Item -Path "${{ github.workspace }}/sufficit-microsip/config_site.h" -Destination "${{ github.workspace }}/pjproject/pjlib/include/pj/" -Force
        Copy-Item -Path "${{ github.workspace }}/sufficit-microsip/patch.ps1" -Destination "${{ github.workspace }}/pjproject/" -Force
        
    - name: 5. Execute PJSIP Patch Script
      working-directory: ./pjproject
      shell: pwsh
      run: ./patch.ps1
        
    - name: 6. Add MSBuild to path
      uses: microsoft/setup-msbuild@v2

    - name: 7. Build Entire PJSIP Solution
      working-directory: ./pjproject
      shell: pwsh
      run: |
        # Pass the opus include path directly to MSBuild. This avoids patching project files.
        # The path is relative from the pjproject directory.
        msbuild.exe pjproject-vs14.sln /p:Configuration=Release /p:Platform=Win32 /p:AdditionalIncludeDirectories="../opus-source/include"

    - name: 8. Prepare Libraries for Final Build
      shell: pwsh
      run: |
        $ws = "${{ github.workspace }}"
        $microsip_project_dir = "$ws/sufficit-microsip"
        
        New-Item -ItemType Directory -Force -Path "$microsip_project_dir/lib"
        New-Item -ItemType Directory -Force -Path "$microsip_project_dir/third_party/opus/Win32"

        # PJSIP's build created libopus in its own third_party/lib dir. Copy it.
        $opus_source_file = Get-Item "$ws/pjproject/third_party/lib/libopus-*.lib"
        Copy-Item -Path $opus_source_file.FullName -Destination "$microsip_project_dir/third_party/opus/Win32/opus.lib" -Force
        
        # PJSIP's build also created the main aggregated library. Copy and rename it.
        $pjlib_source = Get-Item "$ws/pjproject/lib/libpjproject-i386-Win32-vc14-Release.lib"
        $pjlib_dest_renamed = "$microsip_project_dir/lib/libpjproject-i386-Win32-vc14-Release-Static.lib"
        Copy-Item -Path $pjlib_source.FullName -Destination $pjlib_dest_renamed -Force
        
        Write-Host "Library collection successful."
        
    - name: 9. Generate Version Tag
      id: generate_version
      working-directory: ./sufficit-microsip
      run: |
        $VERSION="v$(Get-Date -Format 'yyyy.MM.dd').${{ github.run_number }}"
        echo "VERSION=$VERSION" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
      shell: pwsh
      
    - name: 10. Build the final project
      working-directory: ./sufficit-microsip
      run: msbuild.exe microsip.vcxproj /p:Configuration=Release /p:Platform=x86

    - name: 11. Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: microsip-build
        path: sufficit-microsip/Release/microsip.exe

  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - name: 1. Download build artifact
      uses: actions/download-artifact@v4
      with:
        name: microsip-build

    - name: 2. Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.build.outputs.version }}
        name: "Release ${{ needs.build.outputs.version }}"
        body: |
          Versão compilada automaticamente a partir do último push para a branch main.
        files: microsip.exe