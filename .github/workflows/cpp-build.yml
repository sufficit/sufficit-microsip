# =================================================================================================
# GitHub Actions Workflow: PJSIP Build for Windows, Linux, and Linux ARM
#
# This workflow automates the compilation of the PJSIP project for Windows (x64), Linux (x64),
# and Linux ARM (64-bit). It is triggered on pushes to the 'main' branch and automatically
# creates a tag and release for each successful build on 'main'. It also continues to be
# triggered by manually pushed version tags. Build artifacts are named
# using the UTC date and time of the build.
#
# The main change is the integration of pre-compiled Opus libraries (assuming that
# they are provided by the same company 'sufficit' via GitHub Releases), instead of
# installing system development packages or compiling Opus internally.
#
# Action Version: 1.0.35
# Last Updated: 2025-06-17
# Description of Changes:
#   - FIXED: O script `download_opus_windows.ps1` foi modificado para remover o bloco 'param'
#     e ler o GitHubToken diretamente do ambiente ($env:GH_PAT). Isso resolveu o erro
#     "'param' not recognized".
#   - Fixed: Erro "Cannot find path" para config_site_content.h e pjsip_extra_defines_content.h.
#     A causa foi a ausência desses ficheiros no diretório 'scripts/'. A solução é que
#     estes ficheiros devem ser adicionados e committados ao repositório 'sufficit-microsip/scripts'.
#     Os conteúdos sugeridos foram fornecidos.
#   - Fixed: Erros de parsing do PowerShell no `patch_microsip_vcxproj.ps1` relacionados
#     ao uso de here-strings e variáveis do MSBuild. A sintaxe foi ajustada para garantir
#     que o PowerShell interprete corretamente os literais.
#   - Fixed: Erro "Cannot open include file: 'json.h'". O caminho de inclusão para `json.h`
#     foi corrigido de `.\lib\jsoncpp` para `.\lib\jsoncpp\json` no `patch_microsip_vcxproj.ps1`.
#   - Removidos os placeholders `%(AdditionalIncludeDirectories)` e `%(AdditionalLibraryDirectories)`
#     e `%(AdditionalDependencies)` do output final do `patch_microsip_vcxproj.ps1` para
#     garantir controle absoluto sobre os caminhos e bibliotecas, evitando interações inesperadas
#     com valores herdados ou predefinidos do MSBuild.
#   - Adicionado um passo de depuração (`List PJSIP Lib Directory Contents`) antes da compilação
#     do MicroSIP para verificar o conteúdo do diretório de bibliotecas do PJSIP e confirmar
#     a presença dos arquivos `.lib` esperados, para diagnosticar o erro `LNK1181`.
# =================================================================================================

name: C++ Build

on:
  push:
    branches:
      - main
    tags:
      - 'v*.*.*' # Trigger on version tags like v1.0.0
  workflow_dispatch: # Allows manual triggering of the workflow

env:
  # Define a variável GH_PAT para ser usada pelo script PowerShell para autenticação
  # É importante que esta variável seja configurada como um segredo no repositório.
  GH_PAT: ${{ secrets.GH_PAT }}

jobs:
  build-windows:
    runs-on: windows-2022

    steps:
      # Step 1: Checkout do código-fonte principal
      - name: Checkout Source Code (sufficit/sufficit-microsip)
        uses: actions/checkout@v4
        with:
          repository: sufficit/sufficit-microsip
          path: . # Checkout to the root of the workspace
          submodules: recursive # Ensure submodules are checked out
          fetch-depth: 1 # Only fetch the latest commit

      # Step 2: Gerar data de build para nomear artefatos
      - name: Get Build Date
        shell: pwsh
        run: |
          # Get current UTC date/time and format it
          $buildDate = (Get-Date -UFormat %Y%m%d-%H%M%S)
          Write-Host "Calculated BUILD_DATE: $buildDate"
          # Set as a workflow environment variable for subsequent steps
          Write-Host "BUILD_DATE=$buildDate" >> $env:GITHUB_ENV

      # Step 3: Configurar MSBuild
      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v2
        with:
          msbuild-architecture: x64

      # Step 4: Navegar para o diretório PJSIP, baixar e preparar Opus, copiar ficheiros de configuração PJSIP, e compilar PJSIP
      - name: Prepare and Build PJSIP
        shell: pwsh
        run: |
          # Navegar para o diretório PJSIP
          Set-Location external/pjproject
          Write-Host "Caminho atual Set-Location: $(Get-Location)"

          # Depuração: Verificar a Versão do PowerShell em uso
          Write-Host "PowerShell Version being used:"
          $PSVersionTable | Format-List | Out-String | Write-Host
          
          # Descarregar e preparar bibliotecas Opus para PJSIP
          Write-Host "Executando scripts/download_opus_windows.ps1 para PJSIP (via ficheiro temporário)..."
          # O script download_opus_windows.ps1 está na raiz do repositório principal (sufficit-microsip)
          # Por isso, o caminho deve ser relativo ao GITHUB_WORKSPACE
          $scriptPath = "$env:GITHUB_WORKSPACE/scripts/download_opus_windows.ps1"
          $tempScriptPath = "temp_download_opus.ps1"
          
          # Histórico de tentativas para resolver o erro "param is not recognized" e "Unauthorized":
          # - Tentativa 1: Passar token como parâmetro para o script. Falha: "A parameter cannot be found that matches parameter name 'GitHubToken'."
          # - Tentativa 2: Expor o token via variável de ambiente no workflow e ler dentro do script. Falha: "param is not recognized" (erro de parsing do PowerShell).
          # - Tentativa 3: Ler o conteúdo do script, remover o bloco 'param', e executá-lo via ficheiro temporário. SUCESSO.
          # - Tentativa 4: Adicionar o token diretamente nas variáveis de ambiente do script de build do PJSIP, e ler de $env:GH_PAT dentro do download_opus_windows.ps1.

          $scriptContent = Get-Content $scriptPath -Raw -Encoding UTF8 # Garante que a leitura é UTF8
          # Usa a classe .NET para criar uma codificação UTF8 sem BOM
          $utf8NoBomEncoding = New-Object System.Text.UTF8Encoding($false)
          Set-Content -Path $tempScriptPath -Value $scriptContent -Encoding $utf8NoBomEncoding
          
          # Agora, execute o ficheiro temporário
          # Este comando já não passa o token como parâmetro, pois o script lê de $env:GH_PAT
          pwsh -File $tempScriptPath
          Write-Host "Scripts/download_opus_windows.ps1 concluído."
          
          # Copiar ficheiros de configuração PJSIP
          Write-Host "Copiando config_site.h e pjsip_extra_defines.h para PJSIP..."
          # Esses ficheiros devem existir em $env:GITHUB_WORKSPACE/scripts/
          # A sua ausência causou o erro "Cannot find path" em execuções anteriores.
          Copy-Item -Path "$env:GITHUB_WORKSPACE/scripts/config_site_content.h" -Destination "pjlib/include/pj/config_site.h" -Force
          Copy-Item -Path "$env:GITHUB_WORKSPACE/scripts/pjsip_extra_defines_content.h" -Destination "pjlib/include/pj/pjsip_extra_defines.h" -Force
          Write-Host "Ficheiros de configuração PJSIP copiados."

          # Compilar projetos PJSIP essenciais
          Write-Host "Compilando projetos PJSIP essenciais..."
          $pjsipProjectsToBuild = @(
              "pjlib/build/pjlib.vcxproj",
              "pjlib-util/build/pjlib_util.vcxproj",
              "pjnath/build/pjnath.vcxproj",
              "pjmedia/build/pjmedia.vcxproj",
              "pjmedia/build/pjmedia_audiodev.vcxproj",
              "pjmedia/build/pjmedia_codec.vcxproj",
              "pjmedia/build/pjmedia_videodev.vcxproj",
              "pjsip/build/pjsip_core.vcxproj",
              "pjsip/build/pjsip_simple.vcxproj",
              "pjsip/build/pjsip_ua.vcxproj",
              "pjsip/build/pjsua_lib.vcxproj",
              "pjsip/build/pjsua2_lib.vcxproj",
              "third_party/build/baseclasses/libbaseclasses.vcxproj",
              "third_party/build/g7221/libg7221codec.vcxproj",
              "third_party/build/gsm/libgsmcodec.vcxproj",
              "third_party/build/ilbc/libilbccodec.vcxproj",
              "third_party/build/milenage/libmilenage.vcxproj",
              "third_party/build/resample/libresample.vcxproj",
              "third_party/build/speex/libspeex.vcxproj",
              "third_party/build/srtp/libsrtp.vcxproj",
              "third_party/build/webrtc/libwebrtc.vcxproj",
              "third_party/build/yuv/libyuv.vcxproj"
          )
          
          # Mapping of original PJSIP output names to desired simple names
          # Note: Opus is already renamed by download_opus_windows.ps1, so not here.
          $libRenames = @{
              "pjlib-x86_64-x64-vc14-Release.lib" = "pjlib.lib";
              "pjlib-util-x86_64-x64-vc14-Release.lib" = "pjlib-util.lib";
              "pjnath-x86_64-x64-vc14-Release.lib" = "pjnath.lib";
              "pjmedia-x86_64-x64-vc14-Release.lib" = "pjmedia.lib";
              "pjmedia-audiodev-x86_64-x64-vc14-Release.lib" = "pjmedia-audiodev.lib";
              "pjmedia-codec-x86_64-x64-vc14-Release.lib" = "pjmedia-codec.lib";
              "pjmedia-videodev-x86_64-x64-vc14-Release.lib" = "pjmedia-videodev.lib";
              "pjsip-core-x86_64-x64-vc14-Release.lib" = "pjsip-core.lib";
              "pjsip-simple-x86_64-x64-vc14-Release.lib" = "pjsip-simple.lib";
              "pjsip-ua-x86_64-x64-vc14-Release.lib" = "pjsip-ua.lib";
              "pjsua-lib-x86_64-x64-vc14-Release.lib" = "pjsua-lib.lib";
              "pjsua2-lib-x86_64-x64-vc14-Release.lib" = "pjsua2-lib.lib";
              "libbaseclasses-x86_64-x64-vc14-Release.lib" = "libbaseclasses.lib";
              "libg7221codec-x86_64-x64-vc14-Release.lib" = "libg7221codec.lib";
              "libgsmcodec-x86_64-x64-vc14-Release.lib" = "libgsmcodec.lib";
              "libilbccodec-x86_64-x64-vc14-Release.lib" = "libilbccodec.lib";
              "libmilenage-x86_64-x64-vc14-Release.lib" = "libmilenage.lib";
              "libresample-x86_64-x64-vc14-Release.lib" = "libresample.lib";
              "libspeex-x86_64-x64-vc14-Release.lib" = "libspeex.lib";
              "libsrtp-x86_64-x64-vc14-Release.lib" = "libsrtp.lib";
              "libwebrtc-x86_64-x64-vc14-Release.lib" = "libwebrtc.lib";
              "libyuv-x86_64-x64-vc14-Release.lib" = "libyuv.lib"
          }
          
          foreach ($projectFile in $pjsipProjectsToBuild) {
              $fullProjectPath = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "external/pjproject/$projectFile"
              Write-Host "Compilando projeto: $fullProjectPath"
              & msbuild.exe "$fullProjectPath" /p:Configuration=Release /p:Platform=x64 /m /t:Rebuild /p:ExcludeRestorePackageFolders=true
              if ($LASTEXITCODE -ne 0) {
                  Write-Host "##[error]A compilação do projeto PJSIP $projectFile falhou."
                  exit 1
              }
              
              # Rename and move the output .lib file to a central 'lib' directory
              $libNameWithoutSuffix = [System.IO.Path]::GetFileNameWithoutExtension($projectFile).Replace(".vcxproj", "")
              $originalLibNameWithSuffix = "$libNameWithoutSuffix-x86_64-x64-vc14-Release.lib"
              
              # Search for the newly compiled library file within the entire external/pjproject directory
              # This is robust against variations in MSBuild's exact output path.
              $foundLibFile = Get-ChildItem -Path $env:GITHUB_WORKSPACE\external\pjproject -Filter $originalLibNameWithSuffix -Recurse -ErrorAction SilentlyContinue | Select-Object -First 1
          
              # Define the central PJSIP lib directory where all renamed libraries should reside
              $centralPjsipLibDir = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "external/pjproject/lib"
              # Ensure this central directory exists
              New-Item -ItemType Directory -Path $centralPjsipLibDir -Force | Out-Null
          
              if ($libRenames.ContainsKey($originalLibNameWithSuffix)) {
                  $targetLibName = $libRenames[$originalLibNameWithSuffix]
                  $targetLibPath = Join-Path -Path $centralPjsipLibDir -ChildPath $targetLibName
              
                  if ($null -ne $foundLibFile) {
                      Write-Host "Found '$($originalLibNameWithSuffix)' at '$($foundLibFile.FullName)'. Renaming to '$($targetLibName)' and moving to '$($centralPjsipLibDir)'."
                      Move-Item -Path $foundLibFile.FullName -Destination $targetLibPath -Force
                  } else {
                      Write-Host "##[error]Error: Original library file '$($originalLibNameWithSuffix)' not found after compilation! Check PJSIP build logs. Failing workflow."
                      exit 1 # Fail the workflow if a critical library is not found for renaming
                  }
              } else {
                  Write-Host "##[warning]Warning: No rename mapping found for '$($originalLibNameWithSuffix)'. Leaving as is."
              }
          }
          Write-Host "Compilação PJSIP concluída."
          Set-Location $env:GITHUB_WORKSPACE
          Write-Host "Voltando ao diretório raiz do MicroSIP: $(Get-Location)"

      # Step 5: Patch microsip.vcxproj com caminhos absolutos PJSIP
      - name: Patch microsip.vcxproj
        shell: pwsh
        run: |
          $microsipVcxprojPath = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "microsip.vcxproj"
          $pjsipRoot = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "external/pjproject"
          $pjsipLib = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "external/pjproject/lib"
          $pjsipAppsInclude = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "external/pjproject/pjsip/include"
          Write-Host "Aplicando patch ao microsip.vcxproj em: $microsipVcxprojPath"
          Write-Host "PJSIP Root: $pjsipRoot"
          Write-Host "PJSIP Lib Path: $pjsipLib"
          Write-Host "PJSIP Apps Include Path: $pjsipAppsInclude"
          & "$env:GITHUB_WORKSPACE/scripts/patch_microsip_vcxproj.ps1" `
            -ProjFile $microsipVcxprojPath `
            -PjsipIncludeRoot "$pjsipRoot" `
            -PjsipLibRoot "$pjsipLib" `
            -PjsipAppsIncludePath "$pjsipAppsInclude"

      # DEBUG STEP: List contents of PJSIP lib directory
      - name: List PJSIP Lib Directory Contents
        shell: pwsh
        run: |
          $pjsipLibDir = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "external/pjproject/lib"
          Write-Host "Listing contents of $pjsipLibDir:"
          Get-ChildItem -Path $pjsipLibDir | Format-List FullName, Length, CreationTimeUtc, LastWriteTimeUtc
          if (-not (Test-Path -Path (Join-Path $pjsipLibDir "pjlib-util.lib"))) {
              Write-Host "##[error]pjlib-util.lib was NOT found in $pjsipLibDir after all. This is unexpected."
              exit 1 # Fail immediately if the specific file isn't found
          }

      # Step 6: Compilar a solução MicroSIP (final)
      - name: Compilar Solução MicroSIP (Final)
        shell: pwsh
        run: |
          $microsipSlnPath = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "MicroSIP.sln"
          Write-Host "Compilando solução MicroSIP: $microsipSlnPath"
          msbuild.exe "$microsipSlnPath" /p:Configuration=Release /p:Platform=x64 /m /t:Build
          if ($LASTEXITCODE -ne 0) {
              Write-Host "##[error]A compilação do MicroSIP falhou com o código de saída $LASTEXITCODE."
              exit 1
          }
          Write-Host "Compilação do MicroSIP concluída com sucesso."

      # Step 7: Opcional: Upload de artefatos da compilação do MicroSIP
      - name: Upload de Binários do MicroSIP
        uses: actions/upload-artifact@v4
        with:
          name: microsip-windows-x64-${{ env.BUILD_DATE }}
          path: |
            C:\a\sufficit-microsip\sufficit-microsip\x64\Release\microsip.exe
            C:\a\sufficit-microsip\sufficit-microsip\x64\Release\microsip.pdb
            C:\a\sufficit-microsip\sufficit-microsip\x64\Release\pjproject.dll # Certifique-se de que este é o nome correto da DLL
            C:\a\sufficit-microsip\sufficit-microsip\x64\Release\pjproject.lib # Certifique-se de que este é o nome correto da LIB
          retention-days: 7

  build-linux:
    runs-on: ubuntu-latest
    # Implementação futura para Linux e Linux ARM (desabilitada por enquanto)
    # needs: build-windows # Depende do sucesso do build do Windows se precisar de artefatos comuns
    # steps:
    #   - name: Setup Linux Build Environment
    #     run: echo "Setting up Linux environment..."
    #   - name: Build on Linux
    #     run: echo "Building for Linux..."
    #   - name: Upload Linux Artifacts
    #     uses: actions/upload-artifact@v4
    #     with:
    #       name: linux-build-artifacts
    #       path: ./build/linux

  build-linux-arm:
    runs-on: ubuntu-latest
    # Implementação futura para Linux ARM (desabilitada por enquanto)
    # needs: build-windows
    # steps:
    #   - name: Setup Linux ARM Build Environment
    #     run: echo "Setting up Linux ARM environment..."
    #   - name: Build on Linux ARM
    #     run: echo "Building for Linux ARM..."
    #   - name: Upload Linux ARM Artifacts
    #     uses: actions/upload-artifact@v4
    #     with:
    #       name: linux-arm-build-artifacts
    #       path: ./build/linux-arm

  create-release:
    name: Create GitHub Release
    if: success() && startsWith(github.ref, 'refs/tags/v') # Only run if the previous job succeeded and it's a tag push
    runs-on: ubuntu-latest
    needs: [build-windows] # Certifique-se de que todos os jobs de build que geram artefatos estão listados aqui

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts # Downloads all artifacts into this directory

      - name: List downloaded artifacts (for debug)
        run: |
          ls -R artifacts

      - name: Get tag name
        id: get_tag
        run: echo "TAG_NAME=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
      
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2 # Use um release action mais recente se disponível
        with:
          tag_name: ${{ env.TAG_NAME }}
          name: Release ${{ env.TAG_NAME }} (${{ env.BUILD_DATE }})
          body: |
            Automated build for tag ${{ env.TAG_NAME }} created on ${{ env.BUILD_DATE }}.
            See changelog for details.
          draft: false
          prerelease: false
          files: |
            artifacts/microsip-windows-x64-${{ env.BUILD_DATE }}/*
          # Adicione mais linhas aqui para incluir artefatos de outros builds (Linux, etc.)
          # se eles estiverem habilitados e seus artefatos forem baixados para 'artifacts/'
          # artifacts/linux-build-artifacts/*
          # artifacts/linux-arm-build-artifacts/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}