# =================================================================================================
# GITHUB ACTIONS WORKFLOW FOR BUILDING THE SUFFICIT/SUFFICIT-MICROSIP PROJECT
#
# WORKFLOW VERSION: 40 (Debug - List Opus include directory contents)
#
# Author: Hugo Castro de Deco, Sufficit
# Collaboration: Gemini AI for Google
# Date: June 15, 2025
#
# This header should be updated keeping the same format on every interaction.
# Static things and recomendations for AI:
#
#  1º Comments in this file are always in english
#  2º WORKFLOW VERSION has to be updated by each IA interatiction
#  3º Bellow this section the AI should explain every success step on build proccess
#  4º In Order to avoid syntax errors, and it should never be ignored, we have two more files on repository root:
#   - `config_site.h`: used for includes and variables declarations
#   - `scripts/build_pjsip.ps1`: the definitive build script (with underscore)
#  5º Build OPUS and PJSIP With OPUS
#  6º Do not change this header structure
#
# Above this line the should never forget.
#
# == Explanation of Build Steps ==
#
# This workflow is the definitive version. It uses a separate script for the PJSIP
# build and has simplified, robust pathing by checking out the main repo to the root
# of the workspace. This avoids all previous path resolution and script execution errors.
# =================================================================================================

name: Build C++ and Create Release

on:
  push:
    branches: [ "main" ]

jobs:
  build:
    runs-on: windows-latest
    outputs:
      version: ${{ steps.generate_version.outputs.VERSION }}

    steps:
    - name: 1. Checkout Main Repository to root
      uses: actions/checkout@v4
      # By not specifying a 'path', the repo is checked out to the workspace root, simplifying all subsequent paths.

    - name: 2. Clone PJSIP Repository
      uses: actions/checkout@v4
      with:
        repository: pjsip/pjproject
        path: pjproject
    
    - name: 3. Clone Opus Repository
      uses: actions/checkout@v4
      with:
        repository: xiph/opus
        path: opus-source

    - name: 4. Copy PJSIP config_site.h
      shell: pwsh
      run: Copy-Item -Path "./config_site.h" -Destination "pjproject/pjlib/include/pj/config_site.h"

    - name: 5. Build Opus Library
      shell: pwsh
      run: |
        cmake -S opus-source -B opus-build -G "Visual Studio 17 2022" -A Win32
        cmake --build opus-build --config Release

    - name: 6. Debug: List Opus Include Directory Contents
      shell: pwsh
      run: |
        Write-Host "Listing contents of opus-source/include:"
        Get-ChildItem -Path "opus-source/include" -Recurse

    - name: 7. Copy Opus Headers to PJSIP Include Path
      shell: pwsh
      run: |
        # Ensure the target directory for Opus headers exists within PJSIP's include structure
        $targetOpusIncludeDir = "pjproject/pjlib/include/pj/opus"
        New-Item -ItemType Directory -Force -Path $targetOpusIncludeDir
        # Copy all Opus header files from its source include directory into PJSIP's expected structure
        Copy-Item -Path "opus-source/include/opus/*.h" -Destination $targetOpusIncludeDir

    - name: 8. Add MSBuild to path
      uses: microsoft/setup-msbuild@v2

    - name: 9. Build PJSIP Solution
      shell: pwsh
      run: |
        # Define absolute paths, now from the workspace root.
        # The Opus include path is no longer passed here, as headers are copied directly.
        $sln_path = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "pjproject/pjproject-vs14.sln"
        $script_path = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "scripts/build_pjsip.ps1"
        
        Write-Host "Executing script: $script_path"
        
        # Call the build script using its absolute path and the '-File' operator.
        # It's no longer necessary to pass OpusIncludePath to build_pjsip.ps1
        # because the headers are now placed directly in PJSIP's include structure.
        pwsh.exe -File $script_path -SlnFile $sln_path

    - name: 10. Prepare Libraries for Final Build
      shell: pwsh
      run: |
        echo "--- Collecting all libraries for MicroSIP ---"
        $dist_dir = "dist/lib"
        New-Item -ItemType Directory -Force -Path $dist_dir
        Copy-Item -Path pjproject/lib/*.lib -Destination $dist_dir
        Copy-Item -Path opus-build/Release/opus.lib -Destination $dist_dir
        
    - name: 11. Generate Version Tag
      id: generate_version
      shell: bash
      run: echo "VERSION=v$(date +'%Y.%m.%d').${{ github.run_number }}" >> $GITHUB_OUTPUT
      
    - name: 12. Build the final project
      shell: pwsh
      # Now executing from the root, as checkout was simplified.
      run: msbuild.exe microsip.vcxproj /p:Configuration=Release /p:Platform=x86 /p:AdditionalLibraryDirectories="./dist/lib"

    - name: 13. Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: microsip-build
        # The artifact path is also simpler now.
        path: Release/microsip.exe

  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - name: 1. Download build artifact
      uses: actions/download-artifact@v4
      with:
        name: microsip-build
    - name: 2. Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.build.outputs.version }}
        name: "Release ${{ needs.build.outputs.version }}"
        body: "Versão compilada automaticamente a partir do último push para a branch main."
        files: microsip.exe
