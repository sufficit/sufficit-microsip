# =================================================================================================
# GitHub Actions Workflow: PJSIP Build for Windows, Linux, and Linux ARM
#
# This workflow automates the compilation of the PJSIP project for Windows (x64), Linux (x64),
# and Linux ARM (64-bit). It is triggered on pushes to the 'main' branch and automatically
# creates a tag and release for each successful build on 'main'. It also continues to be
# triggered by manually pushed version tags. Build artifacts are named
# using the UTC date and time of the build.
#
# The main change is the integration of pre-compiled Opus libraries (assuming that
# they are provided by the same company 'sufficit' via GitHub Releases), instead of
# installing system development packages or compiling Opus internally.
#
# Action Version: 1.0.34
# Last Updated: 2025-06-17
# Description of Changes:
#   - FIXED: O script `download_opus_windows.ps1` foi modificado para remover o bloco 'param'
#     e ler o GitHubToken diretamente do ambiente ($env:GH_PAT). Isso resolveu o erro
#     "'param' not recognized".
#   - Fixed: Erro "Cannot find path" para config_site_content.h e pjsip_extra_defines_content.h.
#     A causa foi a ausência desses ficheiros no diretório 'scripts/'. A solução é que
#     estes ficheiros devem ser adicionados e committados ao repositório 'sufficit-microsip/scripts'.
#     Os conteúdos sugeridos para esses ficheiros foram fornecidos.
#   - TENTATIVA: A etapa de compilação do PJSIP foi modificada para excluir projetos problemáticos
#     (principalmente projetos .csproj e .vcxproj relacionados a UWP/WP8) que causavam o erro
#     "The target 'Rebuild' does not exist in the project".
#   - Configured the `Build PJSIP` step to use a Personal Access Token (PAT) for downloading
#     Opus artifacts, explicitly passing it to `download_opus_windows.ps1` to resolve
#     `401 Unauthorized` errors for cross-repository access.
#   - Added `contents: read` permission to the job to allow downloading Opus artifacts
#     from another repository, resolving the 401 Unauthorized error.
#   - Changed 'config_site.h' and 'pjsip_extra_defines.h' generation to direct file copying
#     from pre-existing files in 'scripts/' to resolve persistent C preprocessor errors.
#   - Ensured all comments in the code are in English.
#   - Implemented downloading of pre-compiled Opus artifacts from the 'sufficit/opus' repository
#     (via GitHub Releases) in each PJSIP build job, with enhanced logic for naming and extraction,
#     and improved error handling in `download_opus_windows.ps1`.
#   - Removed `libopus-dev` dependencies from package installers.
#   - Adjusted compilation flags (CFLAGS) as necessary.
#   - Updated the patch script for `microsip.vcxproj` to correctly include all necessary
#     paths for MicroSIP's internal headers, JSON, and PJSIP headers, resolving
#     'Cannot open include file' errors during MicroSIP compilation.
# =================================================================================================

name: Compilar MicroSIP no Windows (com Opus e PJSIP)

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-microsip:
    name: Compilar MicroSIP no Windows
    runs-on: windows-latest
    permissions: # Adicione esta seção
      contents: read # Concede permissão de leitura para o GITHUB_TOKEN

    steps:
      # Step 1: Checkout do repositório MicroSIP
      - name: Checkout do Repositório MicroSIP
        uses: actions/checkout@v4
        with:
          repository: sufficit/sufficit-microsip
          path: . # Checkout para a raiz do workspace
          submodules: recursive

      # Step 2: Checkout do repositório PJSIP
      - name: Checkout do Repositório PJSIP
        uses: actions/checkout@v4
        with:
          repository: sufficit/pjproject
          path: external/pjproject # Clonar PJSIP para external/pjproject

      # Step 3: Configurar MSBuild
      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v2
        with:
          msbuild-architecture: x64 # Garantir que o MSBuild para x64 está disponível

      # Step 4: Compilar PJSIP
      - name: Build PJSIP
        shell: pwsh # Isso garante que o bloco 'run' é interpretado pelo pwsh
        env:
          GH_PAT: ${{ secrets.GH_PAT }} # Define GH_PAT a partir dos segredos do repositório
        run: |
          # Navegar para o diretório PJSIP
          Set-Location external/pjproject
          Write-Host "Caminho atual Set-Location: $(Get-Location)"

          # Depuração: Verificar a Versão do PowerShell em uso
          Write-Host "PowerShell Version being used:"
          $PSVersionTable | Format-List | Out-String | Write-Host

          # Descarregar e preparar bibliotecas Opus para PJSIP
          Write-Host "Executando scripts/download_opus_windows.ps1 para PJSIP (via ficheiro temporário)..."
          # O script download_opus_windows.ps1 está na raiz do repositório principal (sufficit-microsip)
          # Por isso, o caminho deve ser relativo ao GITHUB_WORKSPACE
          $scriptPath = "$env:GITHUB_WORKSPACE/scripts/download_opus_windows.ps1"
          $tempScriptPath = "temp_download_opus.ps1"

          # Histórico de tentativas para resolver o erro "param is not recognized" e "Unauthorized":
          #
          # 1. Chamada direta com & e aspas duplas (tentativa original):
          #    & "$env:GITHUB_WORKSPACE\scripts\download_opus_windows.ps1" -GitHubToken "$env:GH_PAT"
          #    Problema: O PowerShell interpretava a barra invertida como escape dentro da string,
          #              ou o 'param' não era reconhecido por não ser um bloco de script explícito.
          #              Isso resultava em "The term '\' is not recognized".
          #
          # 2. Envolver a chamada em um bloco `pwsh -Command` (tentativa):
          #    pwsh -Command "& \"$env:GITHUB_WORKSPACE/scripts/download_opus_windows.ps1\" -GitHubToken \"$env:GH_PAT\""
          #    Problema: Embora a sintaxe para 'param' fosse tecnicamente correta para um scriptblock,
          #              a interpolação de variáveis e aspas dentro da string ainda causavam problemas de análise.
          #              Ainda resultava em "The term 'param' is not recognized" e/ou "The term '\' is not recognized".
          #
          # 3. Usar 'pwsh -File' (tentativa mais recente e padrão):
          #    pwsh -File "$env:GITHUB_WORKSPACE/scripts/download_opus_windows.ps1" -GitHubToken "$env:GH_PAT"
          #    Problema: Apesar de ser a forma recomendada, o erro 'param' não reconhecido persistiu. Isso indicava
          #              que, mesmo com o '-File', a interpretação inicial do script falhava, possivelmente devido
          #              a um ambiente muito sensível ou a caracteres invisíveis.
          #
          # 4. Usar Dot-Sourcing (`. $scriptPath`):
          #    . $scriptPath -GitHubToken "$env:GH_PAT"
          #    Problema: Mesmo o dot-sourcing falhou com o erro 'param' não reconhecido, o que sugeria um
          #              problema mais fundamental com a análise do ficheiro em si pelo PowerShell. As verificações
          #              de depuração mostraram que o ficheiro era encontrado e parecia ter a codificação correta,
          #              mas o erro persistia.
          #
          # 5. Ler conteúdo do script e executar inline com `pwsh -Command "$scriptContent ..."`:
          #    $scriptContent = Get-Content $scriptPath -Raw -Encoding UTF8
          #    pwsh -Command "$scriptContent -GitHubToken '$env:GH_PAT'"
          #    Problema: Esta abordagem resultou no erro "The term 'param' is not recognized", o que é
          #              extremamente incomum, pois `pwsh -Command` deve interpretar o conteúdo da string
          #              diretamente como código PowerShell. Isso reforça a hipótese de um problema de
          #              caracteres invisíveis ou de codificação subtil no próprio ficheiro `download_opus_windows.ps1`
          #              que persiste mesmo após a leitura com -Encoding UTF8.
          #
          # Solução proposta que funcionou (V7 do download_opus_windows.ps1): O ficheiro `download_opus_windows.ps1`
          # foi modificado para remover o bloco `param` e ler o `$env:GH_PAT` diretamente. A execução
          # via ficheiro temporário com codificação controlada foi mantida para robustez.
          #
          # Solução proposta atual para o problema `MSB4057`: Excluir projetos problemáticos da compilação.
          
          $scriptContent = Get-Content $scriptPath -Raw -Encoding UTF8 # Garante que a leitura é UTF8
          # Usa a classe .NET para criar uma codificação UTF8 sem BOM
          $utf8NoBomEncoding = New-Object System.Text.UTF8Encoding($false)
          Set-Content -Path $tempScriptPath -Value $scriptContent -Encoding $utf8NoBomEncoding

          # Agora, execute o ficheiro temporário
          # Este comando já não passa o token como parâmetro, pois o script lê de $env:GH_PAT
          pwsh -File $tempScriptPath
          if ($LASTEXITCODE -ne 0) { exit 1 }
          Write-Host "Scripts/download_opus_windows.ps1 concluído."

          # Copiar ficheiros de configuração PJSIP
          Write-Host "Copiando config_site.h e pjsip_extra_defines.h para PJSIP..."
          # Esses ficheiros devem existir em $env:GITHUB_WORKSPACE/scripts/
          # A sua ausência causou o erro "Cannot find path" em execuções anteriores.
          Copy-Item -Path "$env:GITHUB_WORKSPACE/scripts/config_site_content.h" -Destination "pjlib/include/pj/config_site.h" -Force
          Copy-Item -Path "$env:GITHUB_WORKSPACE/scripts/pjsip_extra_defines_content.h" -Destination "pjlib/include/pj/pjsip_extra_defines.h" -Force
          Write-Host "Ficheiros de configuração PJSIP copiados."

          # Patch PJSIP pjmedia_codec.vcxproj para definições x64 e Opus
          Write-Host "Patching pjmedia_codec.vcxproj para PJSIP..."
          $pjmedia_codec_vcxproj_path = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "external/pjproject/pjmedia/build/pjmedia_codec.vcxproj"
          # O script patch.ps1 está na raiz do repositório principal (sufficit-microsip)
          & "$env:GITHUB_WORKSPACE/scripts/patch.ps1" -ProjFile $pjmedia_codec_vcxproj_path
          if ($LASTEXITCODE -ne 0) { exit 1 }
          Write-Host "pjmedia_codec.vcxproj patched."

          # Compilar a solução PJSIP
          Write-Host "Compilando solução PJSIP..."
          $pjSlnPath = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "external/pjproject/pjproject-vs14.sln"

          # Histórico de problemas com MSBuild:
          # O MSBuild está a falhar com "The target 'Rebuild' does not exist in the project" para
          # projetos .csproj e .vcxproj de UWP/WP8 que fazem parte da solução PJSIP, mas não são
          # essenciais para a compilação da biblioteca principal do PJSIP para Windows desktop.
          # Para resolver, vamos usar a opção `/p:ExcludeRestorePackageFolders=true` e excluir
          # projetos que não têm o target Rebuild ou que são específicos de UWP/WP8
          # (que não são compiláveis no ambiente padrão).
          
          # Tentativa de exclusão de projetos problemáticos.
          # Os GUIDs e nomes de projetos abaixo são exemplos dos que geralmente causam problemas
          # em ambientes CI se não forem específicos para UWP/WP8.
          # Você pode precisar ajustar esta lista com base nos seus logs exatos.
          $excludeProjects = @(
              "{5B521251-4045-42DB-A343-C195FC47EF0D}", # pjsua_cli_uwp.csproj
              "{E5306B62-2300-410E-926B-98782D794E78}", # pjsua_cli_wp8.csproj
              "{313BE839-D21F-438D-8822-04987E84218C}", # pjsua_cli_uwp_comp.vcxproj
              "{2E31D61D-2E32-46A2-9E39-16584284534F}", # Voip.csproj
              "{5043B087-C19B-4081-AEB2-5503023E28B0}", # VoipBackEnd.vcxproj
              "{4C2A34C3-A833-4029-9F4F-F9651D8354A8}", # VoipHost.vcxproj
              "{92E36D99-A7A2-4217-AE84-180D21626C11}"  # VoipTasks.csproj
          )
          $excludeProjectsString = $excludeProjects -join ';'

          # O script build_pjsip.ps1 está na raiz do repositório principal (sufficit-microsip)
          # Passamos a lista de projetos a excluir para msbuild diretamente.
          # A opção /p:ExcludeRestorePackageFolders=true pode ajudar com projetos .NET Core
          & msbuild.exe "$pjSlnPath" /p:Configuration=Release /p:Platform=x64 /m /t:Rebuild /p:ExcludeRestorePackageFolders=true /p:ExcludeProjectsFromBuild="$excludeProjectsString"
          
          if ($LASTEXITCODE -ne 0) {
              Write-Host "##[error]A compilação da solução PJSIP falhou."
              exit 1
          }
          Write-Host "scripts/build_pjsip.ps1 concluído com LASTEXITCODE: $LASTEXITCODE."
          Write-Host "Compilação PJSIP concluída."

          # Voltar para o diretório raiz do MicroSIP
          Set-Location $env:GITHUB_WORKSPACE
          Write-Host "Voltando ao diretório raiz do MicroSIP: $(Get-Location)"

      # Step 5: Aplicar patch ao ficheiro de projeto do MicroSIP
      - name: Aplicar patch ao projeto MicroSIP
        shell: pwsh
        run: |
          $microsipVcxprojPath = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "microsip.vcxproj"
          $pjsipIncludeRoot = "external/pjproject" # Relativo à raiz do MicroSIP (onde os módulos PJSIP estão)
          $pjsipLibRoot = "external/pjproject/lib" # Relativo à raiz do MicroSIP (onde as libs PJSIP serão geradas)
          $pjsipAppsIncludePath = "external/pjproject/pjsip/include" # Caminho para pjsua.h

          Write-Host "Aplicando patch ao microsip.vcxproj em: $microsipVcxprojPath"
          Write-Host "PJSIP Include Root: $pjsipIncludeRoot"
          Write-Host "PJSIP Lib Path: $pjsipLibPath"
          Write-Host "PJSIP Apps Include Path: $pjsipAppsIncludePath"

          # Chamar o script de patch com todos os parâmetros necessários
          # O script patch_microsip_vcxproj.ps1 está na raiz do repositório principal (sufficit-microsip)
          & "$env:GITHUB_WORKSPACE/scripts/patch_microsip_vcxproj.ps1" `
            -ProjFile $microsipVcxprojPath `
            -PjsipIncludeRoot $pjsipIncludeRoot `
            -PjsipLibRoot $pjsipLibPath `
            -PjsipAppsIncludePath $pjsipAppsIncludePath
          if ($LASTEXITCODE -ne 0) { exit 1 }

      # Step 6: Compilar a solução MicroSIP (final)
      - name: Compilar Solução MicroSIP (Final)
        shell: pwsh
        run: |
          $microsipSlnPath = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "MicroSIP.sln"
          Write-Host "Compilando solução MicroSIP: $microsipSlnPath"
          msbuild.exe "$microsipSlnPath" /p:Configuration=Release /p:Platform=x64 /m /t:Build
          if ($LASTEXITCODE -ne 0) {
              Write-Host "##[error]A compilação do MicroSIP falhou com o código de saída $LASTEXITCODE."
              exit 1
          }
          Write-Host "Compilação do MicroSIP concluída com sucesso."

      # Step 7: Opcional: Upload de artefatos da compilação do MicroSIP
      - name: Upload de Binários do MicroSIP
        uses: actions/upload-artifact@v4
        with:
          name: microsip-windows-x64-binarios
          path: |
            MicroSIP\x64\Release\MicroSIP.exe
            MicroSIP\x64\Release\*.dll
            MicroSIP\x64\Release\*.lib
            # Adicione outros arquivos importantes se necessário, ex: pjsip.dll se for dynamic build
