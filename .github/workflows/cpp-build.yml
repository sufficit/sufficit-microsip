# =================================================================================================
# GitHub Actions Workflow: PJSIP Build for Windows, Linux, and Linux ARM
#
# This workflow automates the compilation of the PJSIP project for Windows (x64), Linux (x64),
# and Linux ARM (64-bit). It is triggered on pushes to the 'main' branch and automatically
# creates a tag and release for each successful build on 'main'. It also continues to be
# triggered by manually pushed version tags. Build artifacts are named
# using the UTC date and time of the build.
#
# The main change is the integration of pre-compiled Opus libraries (assuming that
# they are provided by the same company 'sufficit' via GitHub Releases), instead of
# installing system development packages or compiling Opus internally.
#
# Action Version: 1.0.67
# Last Updated: 2025-06-18 12:10:00 AM -03 (Updated patch_microsip_vcxproj.ps1 version)
# =================================================================================================

name: C++ Build

on:
  push:
    branches:
      - main
    tags:
      - 'v*.*.*' # Trigger on version tags like v1.0.0
  workflow_dispatch: # Allows manual triggering of the workflow

env:
  # Define the GH_PAT variable for PowerShell script authentication
  # This variable must be configured as a secret in the repository.
  GH_PAT: ${{ secrets.GH_PAT }}

jobs:
  build-windows:
    runs-on: windows-2022
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          repository: sufficit/sufficit-microsip
          path: .
          token: ${{ env.GH_PAT }} # Use GH_PAT for this repo checkout
          fetch-depth: 1

      - name: Checkout PJSIP external
        uses: actions/checkout@v4
        with:
          repository: sufficit/pjproject
          path: external/pjproject
          token: ${{ env.GH_PAT }} # Use GH_PAT for this repo checkout

      - name: Get current UTC build date
        id: get_build_date
        shell: pwsh
        run: |
          # Get current UTC date/time and format it
          $buildDate = (Get-Date -UFormat %Y%m%d-%H%M%S)
          Write-Host "Calculated BUILD_DATE: $buildDate"
          # Set as a workflow environment variable for subsequent steps
          Write-Host "BUILD_DATE=$buildDate" >> $env:GITHUB_ENV

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v2
        with:
          msbuild-architecture: x64

      - name: Prepare and Compile PJSIP for Windows
        shell: pwsh
        run: |
          # Navigate to the PJSIP directory
          Set-Location external/pjproject
          Write-Host "Current path Set-Location: $(Get-Location)"

          # Debug: Check PowerShell Version in use
          Write-Host "PowerShell Version being used:"
          $PSVersionTable | Format-List | Out-String | Write-Host

          # Download and prepare Opus libraries for PJSIP
          Write-Host "Executing scripts/download_opus_windows.ps1 for PJSIP (via temporary file)..."
          $scriptPath = "$env:GITHUB_WORKSPACE/scripts/download_opus_windows.ps1"
          $tempScriptPath = "temp_download_opus.ps1"

          $scriptContent = Get-Content $scriptPath -Raw -Encoding UTF8
          $utf8NoBomEncoding = New-Object System.Text.UTF8Encoding($false)
          Set-Content -Path $tempScriptPath -Value $scriptContent -Encoding $utf8NoBomEncoding

          pwsh -File $tempScriptPath
          Write-Host "Scripts/download_opus_windows.ps1 completed."

          # Copy PJSIP configuration files
          Write-Host "Copying config_site.h and pjsip_extra_defines.h to PJSIP..."
          Copy-Item -Path "$env:GITHUB_WORKSPACE/scripts/config_site_content.h" -Destination "pjlib/include/pj/config_site.h" -Force
          Copy-Item -Path "$env:GITHUB_WORKSPACE/scripts/pjsip_extra_defines_content.h" -Destination "pjlib/include/pj/pjsip_extra_defines.h" -Force
          Write-Host "PJSIP configuration files copied."

          # Compile essential PJSIP projects
          Write-Host "Compiling essential PJSIP projects..."
          $pjsipProjectsToBuild = @(
              "pjlib/build/pjlib.vcxproj",
              "pjlib-util/build/pjlib_util.vcxproj",
              "pjnath/build/pjnath.vcxproj",
              "pjmedia/build/pjmedia.vcxproj",
              "pjmedia/build/pjmedia_audiodev.vcxproj",
              "pjmedia/build/pjmedia_codec.vcxproj",
              "pjmedia/build/pjmedia_videodev.vcxproj",
              "pjsip/build/pjsip_core.vcxproj",
              "pjsip/build/pjsip_simple.vcxproj",
              "pjsip/build/pjsip_ua.vcxproj",
              "pjsip/build/pjsua_lib.vcxproj",
              "pjsip/build/pjsua2_lib.vcxproj",
              "third_party/build/baseclasses/libbaseclasses.vcxproj",
              "third_party/build/g7221/libg7221codec.vcxproj",
              "third_party/build/gsm/libgsmcodec.vcxproj",
              "third_party/build/ilbc/libilbccodec.vcxproj",
              "third_party/build/milenage/libmilenage.vcxproj",
              "third_party/build/resample/libresample.vcxproj",
              "third_party/build/speex/libspeex.vcxproj",
              "third_party/build/srtp/libsrtp.vcxproj",
              "third_party/build/webrtc/libwebrtc.vcxproj",
              "third_party/build/yuv/libyuv.vcxproj"
          )

          # Mapping of base project names (from vcxproj, normalized) to desired simple names.
          # The keys here are the base name of the project, standardized to hyphens if original has them,
          # or the simple name if no hyphen/underscore issue.
          # The values are the final names that MicroSIP expects.
          # Opus is already handled separately.
          $libRenames = @{
              "pjlib" = "pjlib.lib";
              "pjlib-util" = "pjlib-util.lib"; # pjlib_util.vcxproj -> pjlib-util.lib
              "pjnath" = "pjnath.lib";
              "pjmedia" = "pjmedia.lib";
              "pjmedia-audiodev" = "pjmedia-audiodev.lib";
              "pjmedia-codec" = "pjmedia-codec.lib";
              "pjmedia-videodev" = "pjmedia-videodev.lib";
              "pjsip-core" = "pjsip-core.lib";
              "pjsip-simple" = "pjsip-simple.lib";
              "pjsip-ua" = "pjsip-ua.lib";
              "pjsua-lib" = "pjsua-lib.lib";
              "pjsua2-lib" = "pjsua2-lib.lib";
              "libbaseclasses" = "libbaseclasses.lib";
              "libg7221codec" = "libg7221codec.lib";
              "libgsmcodec" = "libgsmcodec.lib";
              "libilbccodec" = "libilbccodec.lib";
              "libmilenage" = "libmilenage.lib";
              "libresample" = "libresample.lib";
              "libspeex" = "libspeex.lib";
              "libsrtp" = "libsrtp.lib";
              "libwebrtc" = "libwebrtc.lib";
              "libyuv" = "libyuv.lib"
          }

          foreach ($projectFile in $pjsipProjectsToBuild) {
              $fullProjectPath = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "external/pjproject/$projectFile"
              Write-Host "Compiling project: $fullProjectPath"
              
              $rawMsbuildOutput = & msbuild.exe "$fullProjectPath" /p:Configuration=Release /p:Platform=x64 /m /t:Rebuild /p:ExcludeRestorePackageFolders=true /nologo
              Write-Host ($rawMsbuildOutput | Out-String)

              if ($LASTEXITCODE -ne 0) {
                  Write-Host "##[error]PJSIP project compilation failed for $projectFile."
                  exit 1
              }
              
              $actualOutputLibPath = $null
              foreach ($line in $rawMsbuildOutput) {
                  if ($line -match "(?i)\.vcxproj -> (.*\.lib)") {
                      $match = $matches[1]
                      $actualOutputLibPath = $match.Trim()
                      Write-Host "DEBUG: Extracted actual output .lib path: $actualOutputLibPath"
                      break
                  }
              }

              if ($null -eq $actualOutputLibPath) {
                  Write-Host "##[error]Error: Could not determine actual output .lib path from MSBuild log for $projectFile. Failing workflow."
                  exit 1
              }
              
              $sourceLibPath = $actualOutputLibPath
              $actualLibFileName = [System.IO.Path]::GetFileName($sourceLibPath) # e.g., pjlib_util-x86_64-x64-vc14-Release.lib
              
              # Extract the base name from the project file, then normalize it to match keys in $libRenames
              $baseProjectName = [System.IO.Path]::GetFileNameWithoutExtension($projectFile).Replace('_', '-').Replace('.vcxproj', '')
              
              Write-Host "Contents of source directory of '$actualLibFileName':"
              Get-ChildItem -Path (Split-Path -Path $sourceLibPath -Parent) -ErrorAction SilentlyContinue | Format-List FullName, Name, Length, CreationTimeUtc, LastWriteTimeUtc
              Write-Host "--------------------------------------------------------"

              $foundLibFile = $null
              $maxRetries = 5
              $retryDelaySec = 2

              # Wait for the .lib file to exist at the *exact* path reported by MSBuild
              for ($i = 0; $i -lt $maxRetries; $i++) {
                  Write-Host "Attempting to find freshly compiled library '$($actualLibFileName)' at '$($sourceLibPath)' (Attempt $($i + 1)/$maxRetries)..."
                  if (Test-Path -Path $sourceLibPath -PathType Leaf -ErrorAction SilentlyContinue) {
                      $foundLibFile = Get-Item -Path $sourceLibPath -ErrorAction SilentlyContinue
                      if ($null -ne $foundLibFile) {
                          Write-Host "Found compiled file at exact path."
                          break
                      }
                  }
                  if ($i -lt ($maxRetries - 1)) {
                      Write-Host "File not found at exact path, retrying in ${retryDelaySec} seconds..."
                      Start-Sleep -Seconds $retryDelaySec
                  }
              }

              # Define the central PJSIP lib directory
              $centralPjsipLibDir = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "external/pjproject/lib"
              New-Item -ItemType Directory -Path $centralPjsipLibDir -Force | Out-Null

              $targetLibName = $null
              if ($libRenames.ContainsKey($baseProjectName)) { # Use the normalized base project name to check against the map
                  $targetLibName = $libRenames[$baseProjectName]
                  Write-Host "DEBUG: Found rename mapping for base project name '$($baseProjectName)'. Target name: '$targetLibName'."
              } else {
                  # Fallback: if no explicit rename mapping for the base project name, use the actual compiled file name.
                  $targetLibName = $actualLibFileName
                  Write-Host "##[warning]Warning: No specific rename mapping found for base project name '$($baseProjectName)'. Using original compiled file name as target: '$targetLibName'."
              }
              
              $targetLibPath = Join-Path -Path $centralPjsipLibDir -ChildPath $targetLibName
              
              if ($null -ne $foundLibFile) {
                  Write-Host "Found '$($foundLibFile.Name)' at '$($foundLibFile.FullName)'. Moving to '$($targetLibPath)'."
                  Move-Item -Path $foundLibFile.FullName -Destination $targetLibPath -Force
              } else {
                  Write-Host "##[error]Error: Compiled library file '$($actualLibFileName)' was reported by MSBuild but not found at '$($sourceLibPath)' after all retries for processing. Failing workflow."
                  exit 1
              }
          }
          Write-Host "PJSIP compilation completed."
          Set-Location $env:GITHUB_WORKSPACE
          Write-Host "Returning to MicroSIP root directory: $(Get-Location)"

      - name: Patch MicroSIP project file (microsip.vcxproj)
        shell: pwsh
        run: |
          $microsipVcxprojPath = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "microsip.vcxproj"
          $pjsipRoot = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "external/pjproject"
          $pjsipLib = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "external/pjproject/lib"
          $pjsipAppsInclude = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "external/pjproject/pjsip/include"
          Write-Host "Patching microsip.vcxproj at: $microsipVcxprojPath"
          Write-Host "PJSIP Root: $pjsipRoot"
          Write-Host "PJSIP Lib Path: $pjsipLib"
          Write-Host "PJSIP Apps Include Path: $pjsipAppsInclude"
          & "$env:GITHUB_WORKSPACE/scripts/patch_microsip_vcxproj.ps1" `
            -ProjFile $microsipVcxprojPath `
            -PjsipIncludeRoot "$pjsipRoot" `
            -PjsipLibRoot "$pjsipLib" `
            -PjsipAppsIncludePath "$pjsipAppsInclude"

      - name: List PJSIP Lib Directory Contents (for debug)
        shell: pwsh
        run: |
          $pjsipLibDir = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "external/pjproject/lib"
          Write-Host "Listing contents of ${pjsipLibDir}:"
          Get-ChildItem -Path $pjsipLibDir | Format-List FullName, Name, Length, CreationTimeUtc, LastWriteTimeUtc

      - name: Compile MicroSIP
        shell: pwsh
        run: |
          $microsipSlnPath = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "MicroSIP.sln"
          Write-Host "Compiling MicroSIP solution: $microsipSlnPath"
          msbuild.exe "$microsipSlnPath" /p:Configuration=Release /p:Platform=x64 /m /t:Build
          if ($LASTEXITCODE -ne 0) {
              Write-Host "##[error]MicroSIP compilation failed with exit code $LASTEXITCODE."
              exit 1
          }
          Write-Host "MicroSIP compilation completed successfully."

      - name: Upload MicroSIP artifacts
        uses: actions/upload-artifact@v4
        with:
          name: microsip-windows-x64-${{ env.BUILD_DATE }}
          path: |
            x64/Release/microsip.exe
            x64/Release/microsip.pdb
          if-no-files-found: error # Fail if no files are found to upload
          retention-days: 7

  # Placeholder for Linux build (uncomment and configure when ready)
  # build-linux:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #     - name: Build Linux (Placeholder)
  #       run: |
  #         echo "Linux build logic here"

  # Placeholder for Linux ARM build (uncomment and configure when ready)
  # build-linux-arm:
  #   runs-on: ubuntu-latest # Or a self-hosted runner with ARM support
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #     - name: Build Linux ARM (Placeholder)
  #       run: |
  #         echo "Linux ARM build logic here"

  create-release:
    if: success() && startsWith(github.ref, 'refs/tags/v') # Only run if the previous job succeeded and it's a tag push
    runs-on: ubuntu-latest
    needs: [build-windows] # Ensure all build jobs that generate artifacts are listed here

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts # Downloads all artifacts into this directory

      - name: List downloaded artifacts (for debug)
        run: |
          ls -R artifacts

      - name: Get tag name
        id: get_tag
        run: echo "TAG_NAME=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
      
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2 # Use a more recent release action if available
        with:
          tag_name: ${{ env.TAG_NAME }}
          name: Release ${{ env.TAG_NAME }} (${{ env.BUILD_DATE }})
          body: |
            Automated build for tag ${{ env.TAG_NAME }} created on ${{ env.BUILD_DATE }}.
            See changelog for details.
          draft: false
          prerelease: false
          files: |
            artifacts/microsip-windows-x64-${{ env.BUILD_DATE }}/*
          # Add more lines here to