# =================================================================================================
# GITHUB ACTIONS WORKFLOW FOR BUILDING THE SUFFICIT/SUFFICIT-MICROSIP PROJECT
#
# WORKFLOW VERSION: 34 (Fix script path resolution)
#
# Author: Hugo Castro de Deco, Sufficit
# Collaboration: Gemini AI for Google
# Date: June 13, 2025
# 
# This header should be updated keeping the same format on every interaction.
# Static things and recomendations for AI:
#
#  1º Comments in this file are always in english
#  2º WORKFLOW VERSION has to be updated by each IA interatiction
#  3º Bellow this section the AI should explain every success step on build proccess
#  4º In Order to avoid syntax errors, and it should never be ignored, we have two more files on repository root:
#   - `config_site.h`: used for includes and variables declarations
#   - `patch.ps1`: powershell script (no longer used by this workflow)
#   - `build_pjsip.ps1`
#  5º Do not change this header structure
#  6º Use & operator to call powershell scripts
#  7º Everytime you need to escape something, evaluate the ideia of create another file for that
#
# Above this line the should never forget.
#
# == Explanation of Build Steps ==
#
# This workflow fixes a path resolution error by using an absolute path to the build script.
# Instead of relying on a relative path, it constructs the full path using the
# `GITHUB_WORKSPACE` environment variable, which is a more robust method.
# =================================================================================================

name: Build C++ and Create Release

on:
  push:
    branches: [ "main" ]

jobs:
  build:
    runs-on: windows-latest
    outputs:
      version: ${{ steps.generate_version.outputs.VERSION }}

    steps:
    - name: 1. Checkout Main Repository
      uses: actions/checkout@v4
      with:
        path: sufficit-microsip

    - name: 2. Clone PJSIP Repository
      uses: actions/checkout@v4
      with:
        repository: pjsip/pjproject
        path: pjproject
    
    - name: 3. Clone Opus Repository
      uses: actions/checkout@v4
      with:
        repository: xiph/opus
        path: opus-source

    - name: 4. Copy PJSIP config_site.h
      shell: pwsh
      run: Copy-Item -Path "sufficit-microsip/config_site.h" -Destination "pjproject/pjlib/include/pj/config_site.h"

    - name: 5. Build Opus Library
      shell: pwsh
      run: |
        cmake -S opus-source -B opus-build -G "Visual Studio 17 2022" -A Win32
        cmake --build opus-build --config Release

    - name: 6. Add MSBuild to path
      uses: microsoft/setup-msbuild@v2

    - name: 7. Build PJSIP Solution
      shell: pwsh
      run: |
        # Define os caminhos absolutos para todos os artefatos necessários
        $opus_path = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "opus-source/include"
        $sln_path = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "pjproject/pjproject-vs14.sln"
        $script_path = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "sufficit-microsip/scripts/build-pjsip.ps1"
        
        Write-Host "Caminho do Script: $script_path"
        
        # Chama o script de build usando seu caminho absoluto para garantir a resolução.
        & $script_path -OpusIncludePath $opus_path -SlnFile $sln_path

    - name: 8. Prepare Libraries for Final Build
      shell: pwsh
      run: |
        echo "--- Collecting all libraries for MicroSIP ---"
        $dist_dir = "dist/lib"
        New-Item -ItemType Directory -Force -Path $dist_dir
        Copy-Item -Path pjproject/lib/*.lib -Destination $dist_dir
        Copy-Item -Path opus-build/Release/opus.lib -Destination $dist_dir
        
    - name: 9. Generate Version Tag
      id: generate_version
      shell: bash
      run: echo "VERSION=v$(date +'%Y.%m.%d').${{ github.run_number }}" >> $GITHUB_OUTPUT
      
    - name: 10. Build the final project
      working-directory: ./sufficit-microsip
      run: msbuild.exe microsip.vcxproj /p:Configuration=Release /p:Platform=x86 /p:AdditionalLibraryDirectories="../dist/lib"

    - name: 11. Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: microsip-build
        path: sufficit-microsip/Release/microsip.exe

  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - name: 1. Download build artifact
      uses: actions/download-artifact@v4
      with:
        name: microsip-build
    - name: 2. Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.build.outputs.version }}
        name: "Release ${{ needs.build.outputs.version }}"
        body: "Versão compilada automaticamente a partir do último push para a branch main."
        files: microsip.exe
