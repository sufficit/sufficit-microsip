# =================================================================================================
# GITHUB ACTIONS WORKFLOW FOR BUILDING THE SUFFICIT/SUFFICIT-MICROSIP PROJECT
#
# WORKFLOW VERSION: 14 (Verification & Final Attempt)
#
# Author: Hugo Castro de Deco, Sufficit
# Collaboration: Gemini AI for Google
# Date: June 12, 2025
#
# == Logic and Execution Steps (Final Reviewed Version) ==
#
# This workflow abandons all previous complex approaches and focuses on a simple, verifiable
# sequence to resolve the final build error.
#
# 1.  **Setup (Steps 1-7):** All sources are checked out, PJSIP is moved to the root, the
#     config_site.h is created, and Opus is built independently via CMake. This foundation is solid.
#
# 2.  **Pre-position Dependencies (Step 8):** This step copies the Opus headers and library to the
#     locations where we believe PJSIP expects them.
#
# 3.  **DEBUG & VERIFY (Step 9):** THIS IS THE CRITICAL NEW STEP. To eliminate any guesswork,
#     this step explicitly lists the contents of the `third_party` directory and confirms the
#     existence of `opus.h` at its expected location. If the file is not there, the build will
#     fail immediately, telling us the copy in Step 8 is the problem.
#
# 4.  **Build & Finalize (Steps 10-14):** The PJSIP build will only run if the verification in
#     Step 9 passes. The final steps then copy the generated libs and build the main project.
# =================================================================================================

name: Build C++ and Create Release

on:
  push:
    branches: [ "main" ]

jobs:
  build:
    runs-on: windows-latest
    outputs:
      version: ${{ steps.generate_version.outputs.VERSION }}

    steps:
    - name: 1. Checkout MicroSip Repository
      uses: actions/checkout@v4
      with:
        repository: sufficit/sufficit-microsip
        path: sufficit-microsip

    - name: 2. Clone PJSIP Repository
      uses: actions/checkout@v4
      with:
        repository: pjsip/pjproject
        path: pjproject
    
    - name: 3. Clone Opus Repository
      uses: actions/checkout@v4
      with:
        repository: xiph/opus
        path: opus-source

    - name: 4. Restructure PJSIP directories
      shell: pwsh
      run: |
        Move-Item -Path ${{ github.workspace }}\pjproject\* -Destination ${{ github.workspace }}\
        Remove-Item -Path ${{ github.workspace }}\pjproject -Recurse -Force

    - name: 5. Create PJSIP config_site.h
      shell: pwsh
      run: |
        $config = @"
        #define PJ_WIN32 1
        #include <windows.h>
        #define PJ_HAS_IPV6 1
        #define PJSUA_MAX_ACC 10
        #define PJSUA_MAX_CALLS 32
        #define PJMEDIA_HAS_G729_CODEC 1
        #define PJMEDIA_HAS_ILBC_CODEC 1
        #define PJMEDIA_HAS_SPEEX_CODEC 1
        #define PJMEDIA_HAS_SPEEX_AEC 1
        #define PJMEDIA_HAS_OPUS_CODEC 1
        #define PJMEDIA_HAS_VIDEO 0
        #define PJMEDIA_VIDEO_DEV_HAS_SDL 0
        #define PJMEDIA_VIDEO_DEV_HAS_DSHOW 0
        #define PJ_LOG_MAX_LEVEL 3
        #define PJMEDIA_AUD_MAX_DEVS 64
        "@
        Set-Content -Path "${{ github.workspace }}\pjlib\include\pj\config_site.h" -Value $config

    - name: 6. Add MSBuild to path
      uses: microsoft/setup-msbuild@v2

    - name: 7. Build Opus Library (Independent)
      shell: pwsh
      run: |
        echo "Building Opus with CMake..."
        cmake -S opus-source -B opus-build -G "Visual Studio 17 2022" -A Win32
        cmake --build opus-build --config Release

    - name: 8. Prepare Opus Artifacts for PJSIP
      shell: pwsh
      run: |
        echo "Placing Opus headers and libraries for PJSIP build..."
        # PJSIP expects to find #include <opus/opus.h> relative to its `third_party` directory.
        # This means we need a structure like: third_party/opus/opus.h
        $opusHeaderDest = "third_party/opus"
        New-Item -ItemType Directory -Force -Path $opusHeaderDest
        Copy-Item -Path opus-source/include/*.h -Destination $opusHeaderDest -Force
        
        # PJSIP's sample apps link against libopus.a
        $pjThirdPartyLibDir = "third_party/lib"
        New-Item -ItemType Directory -Force -Path $pjThirdPartyLibDir
        Copy-Item -Path "opus-build/Release/opus.lib" -Destination "$pjThirdPartyLibDir/libopus.a" -Force

    - name: 9. DEBUG - Verify File Structure
      shell: pwsh
      run: |
        echo "--- Verifying file structure before PJSIP build ---"
        $opusHeaderPath = "third_party/opus/opus.h"
        $opusLibPath = "third_party/lib/libopus.a"
        
        echo "Listing contents of third_party directory:"
        Get-ChildItem -Path "third_party" -Recurse
        
        echo "--- Checking for critical files ---"
        if (Test-Path $opusHeaderPath) {
          echo "SUCCESS: Found Opus header at $opusHeaderPath"
        } else {
          echo "FATAL: Opus header NOT FOUND at $opusHeaderPath"
          exit 1
        }
        if (Test-Path $opusLibPath) {
          echo "SUCCESS: Found Opus library at $opusLibPath"
        } else {
          echo "FATAL: Opus library NOT FOUND at $opusLibPath"
          exit 1
        }

    - name: 10. Build PJSIP Libraries
      shell: pwsh
      continue-on-error: true # Keep this in case non-essential samples fail for other reasons
      run: |
        echo "Building the entire PJSIP solution..."
        msbuild.exe pjproject-vs14.sln /p:Configuration=Release /p:Platform=Win32

    - name: 11. Prepare Libraries for Final Linkage
      shell: pwsh
      run: |
        echo "--- Preparing all required libraries for MicroSIP ---"
        $microsip_lib_dir = "sufficit-microsip/lib"
        $microsip_opus_dir = "sufficit-microsip/third_party/opus/Win32"
        New-Item -ItemType Directory -Force -Path $microsip_lib_dir
        New-Item -ItemType Directory -Force -Path $microsip_opus_dir
        
        Copy-Item -Path "opus-build/Release/opus.lib" -Destination $microsip_opus_dir
        echo "Copied opus.lib for MicroSIP."

        $pjlib_source = Get-Item "lib/libpjproject-*.lib"
        if ($pjlib_source) {
            $pjlib_dest_renamed = "$microsip_lib_dir/libpjproject-i386-Win32-vc14-Release-Static.lib"
            Copy-Item -Path $pjlib_source.FullName -Destination $pjlib_dest_renamed -Force
            echo "Copied and Renamed main PJSIP library."
        } else {
            echo "WARNING: Main PJSIP aggregated library was not found. The final build may fail."
        }

    - name: 12. Generate Version Tag
      id: generate_version
      working-directory: ./sufficit-microsip
      run: |
        $VERSION="v$(Get-Date -Format 'yyyy.MM.dd').${{ github.run_number }}"
        echo "VERSION=$VERSION" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
      
    - name: 13. Build the final project
      working-directory: ./sufficit-microsip
      run: msbuild.exe /p:Configuration=Release /p:Platform=x86 microsip.vcxproj

    - name: 14. Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: microsip-build
        path: sufficit-microsip/Release/microsip.exe

  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - name: 1. Download build artifact
      uses: actions/download-artifact@v4
      with:
        name: microsip-build

    - name: 2. Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.build.outputs.version }}
        name: "Release ${{ needs.build.outputs.version }}"
        body: |
          Versão compilada automaticamente a partir do último push para a branch main.
        files: microsip.exe