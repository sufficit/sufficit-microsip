# =================================================================================================
# GITHUB ACTIONS WORKFLOW FOR BUILDING THE SUFFICIT/SUFFICIT-MICROSIP PROJECT
#
# WORKFLOW VERSION: 19 (Definitive Fix for Move-Item Conflict)
#
# Author: Hugo Castro de Deco, Sufficit
# Collaboration: Gemini AI for Google
# Date: June 13, 2025
#
# == Logic and Execution Steps ==
#
# This workflow uses the user-preferred external script method and definitively fixes the
# "file already exists" error by removing the conflicting .github directory from the
# pjproject source before moving its contents.
# =================================================================================================

name: Build C++ and Create Release

on:
  push:
    branches: [ "main" ]

jobs:
  build:
    runs-on: windows-latest
    outputs:
      version: ${{ steps.generate_version.outputs.VERSION }}

    steps:
    - name: 1. Checkout Main Repo with Scripts
      uses: actions/checkout@v4

    - name: 2. Prepare Dependencies and Patch
      shell: pwsh
      run: |
        echo "Cloning PJSIP..."
        git clone --depth 1 https://github.com/pjsip/pjproject.git
        
        echo "Cloning Opus..."
        git clone --depth 1 https://github.com/xiph/opus.git ./pjproject/third_party/opus

        echo "Restructuring PJSIP directories..."
        # CRITICAL FIX: Remove the conflicting .github directory from pjproject BEFORE moving.
        if (Test-Path ./pjproject/.github) {
          Remove-Item -Path ./pjproject/.github -Recurse -Force
          Write-Host "Removed conflicting .github directory from PJSIP source."
        }
        
        # Now move the contents to the root.
        Get-ChildItem -Path ./pjproject -Exclude .git | Move-Item -Destination ./ -Force
        Remove-Item -Path ./pjproject -Recurse -Force
        
        echo "Copying config and executing patch..."
        Copy-Item -Path ./config_site.h -Destination ./pjlib/include/pj/ -Force
        ./patch.ps1
        
    - name: 3. Add MSBuild to path
      uses: microsoft/setup-msbuild@v2

    - name: 4. Build Entire PJSIP Solution
      shell: pwsh
      run: |
        echo "Building the entire PJSIP solution (pjproject-vs14.sln)..."
        msbuild.exe pjproject-vs14.sln /p:Configuration=Release /p:Platform=Win32

    - name: 5. Prepare Libraries for Final Build
      shell: pwsh
      run: |
        echo "--- Preparing all required libraries for MicroSIP ---"
        $microsip_lib_dir = "./lib"
        $microsip_opus_dir = "./third_party/opus/Win32"
        New-Item -ItemType Directory -Force -Path $microsip_lib_dir
        New-Item -ItemType Directory -Force -Path $microsip_opus_dir
        
        $opus_source_file = Get-Item "third_party/lib/libopus-*.lib"
        Copy-Item -Path $opus_source_file.FullName -Destination "$microsip_opus_dir/opus.lib" -Force
        echo "Copied $($opus_source_file.Name) to $microsip_opus_dir/opus.lib"

        $pjlib_source = Get-Item "lib/libpjproject-i386-Win32-vc14-Release.lib"
        $pjlib_expected_name = "libpjproject-i386-Win32-vc14-Release-Static.lib"
        $pjlib_dest_renamed = "$microsip_lib_dir/$pjlib_expected_name"
        Copy-Item -Path $pjlib_source.FullName -Destination $pjlib_dest_renamed -Force
        echo "Copied and Renamed $($pjlib_source.Name) to $pjlib_dest_renamed"
        
    - name: 6. Generate Version Tag
      id: generate_version
      run: |
        $VERSION="v$(Get-Date -Format 'yyyy.MM.dd').${{ github.run_number }}"
        echo "VERSION=$VERSION" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
      shell: pwsh
      
    - name: 7. Build the final project
      run: msbuild.exe /p:Configuration=Release /p:Platform=x86 microsip.vcxproj

    - name: 8. Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: microsip-build
        path: Release/microsip.exe

  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - name: 1. Download build artifact
      uses: actions/download-artifact@v4
      with:
        name: microsip-build

    - name: 2. Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.build.outputs.version }}
        name: "Release ${{ needs.build.outputs.version }}"
        body: |
          Versão compilada automaticamente a partir do último push para a branch main.
        files: microsip.exe