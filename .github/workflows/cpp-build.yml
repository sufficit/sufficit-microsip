# =================================================================================================
# GITHUB ACTIONS WORKFLOW FOR BUILDING THE SUFFICIT/SUFFICIT-MICROSIP PROJECT
#
# WORKFLOW VERSION: 10 (Definitive)
#
# Author: Hugo Castro de Deco, Sufficit
# Collaboration: Gemini AI for Google
# Date: June 12, 2025
#
# == Logic and Execution Steps (Consolidated) ==
#
# This workflow represents a complete, reviewed solution to the build complexities.
#
# 1.  **Checkout & Structure (Steps 1-4):** All repositories are checked out. PJSIP is placed
#     at the workspace root, and the Opus source code is placed inside PJSIP's `third_party/opus`
#     directory, as expected by the PJSIP build system.
#
# 2.  **Configuration (Step 5):** The mandatory `pjlib/include/pj/config_site.h` is created with
#     all necessary flags, including the one to enable the Opus codec.
#
# 3.  **Patch PJSIP Project (Step 6):** This is the critical fix. A robust PowerShell script
#     programmatically edits the broken `pjmedia-codec.vcxproj` file. It adds the correct
#     include path to the Opus headers, resolving a long-standing inconsistency in the PJSIP
#     project files. This avoids all previous compilation errors.
#
# 4.  **Unified Build (Step 8):** A single MSBuild command now compiles the entire PJSIP solution.
#     Because of the patch in Step 6, this process will now successfully build all PJSIP
#     libraries and its Opus dependency without errors.
#
# 5.  **Prepare Final Linkage (Step 9):** After the PJSIP build, this step copies and renames
#     the generated libraries to match the exact names and locations expected by the main
#     `microsip.vcxproj` project, ensuring a successful final link.
# =================================================================================================

name: Build C++ and Create Release

on:
  push:
    branches: [ "main" ]

jobs:
  build:
    runs-on: windows-latest
    outputs:
      version: ${{ steps.generate_version.outputs.VERSION }}

    steps:
    - name: 1. Checkout MicroSip Repository
      uses: actions/checkout@v4
      with:
        repository: sufficit/sufficit-microsip
        path: sufficit-microsip

    - name: 2. Clone PJSIP Repository
      uses: actions/checkout@v4
      with:
        repository: pjsip/pjproject
        path: pjproject
    
    - name: 3. Clone Opus into PJSIP third_party
      uses: actions/checkout@v4
      with:
        repository: xiph/opus
        path: pjproject/third_party/opus

    - name: 4. Restructure PJSIP directories
      shell: pwsh
      run: |
        Move-Item -Path ${{ github.workspace }}\pjproject\* -Destination ${{ github.workspace }}\
        Remove-Item -Path ${{ github.workspace }}\pjproject -Recurse -Force

    - name: 5. Create PJSIP config_site.h
      shell: pwsh
      run: |
        $config = @"
        #define PJ_WIN32 1
        #include <windows.h>
        #define PJ_HAS_IPV6 1
        #define PJSUA_MAX_ACC 10
        #define PJSUA_MAX_CALLS 32
        #define PJMEDIA_HAS_G729_CODEC 1
        #define PJMEDIA_HAS_ILBC_CODEC 1
        #define PJMEDIA_HAS_SPEEX_CODEC 1
        #define PJMEDIA_HAS_SPEEX_AEC 1
        #define PJMEDIA_HAS_OPUS_CODEC 1
        #define PJMEDIA_HAS_VIDEO 0
        #define PJMEDIA_VIDEO_DEV_HAS_SDL 0
        #define PJMEDIA_VIDEO_DEV_HAS_DSHOW 0
        #define PJ_LOG_MAX_LEVEL 3
        #define PJMEDIA_AUD_MAX_DEVS 64
        "@
        Set-Content -Path "${{ github.workspace }}\pjlib\include\pj\config_site.h" -Value $config

    - name: 6. Patch pjmedia-codec.vcxproj to add Opus include path
      shell: pwsh
      run: |
        $projFile = "pjmedia/build/pjmedia_codec.vcxproj"
        echo "Loading project file: $projFile"
        $xml = [xml](Get-Content $projFile)
        
        # This literal here-string is the safest way to define the condition string
        # to avoid any character interpretation by PowerShell or the runner.
        $targetCondition = @'
'$(Configuration)|$(Platform)'=='Release|Win32'
'@
        $patched = $false
        foreach ($group in $xml.Project.ItemDefinitionGroup) {
            if ($group.Condition -eq $targetCondition) {
                echo "Found 'Release|Win32' configuration. Patching..."
                $includeDirsNode = $group.ClCompile.AdditionalIncludeDirectories
                $currentIncludes = $includeDirsNode.'#text'
                $newIncludes = $currentIncludes + ";../../third_party/opus/include"
                $includeDirsNode.'#text' = $newIncludes
                echo "Successfully patched include path."
                $patched = $true
                break
            }
        }
        if (-not $patched) {
            echo "ERROR: Could not find 'Release|Win32' configuration in $projFile to patch."
            exit 1
        }
        
        $xml.Save($projFile)
        echo "Saved updated project file: $projFile"
        
    - name: 7. Add MSBuild to path
      uses: microsoft/setup-msbuild@v2

    - name: 8. Build PJSIP and ALL its Dependencies
      shell: pwsh
      run: |
        echo "Building the entire PJSIP solution..."
        msbuild.exe pjproject-vs14.sln /p:Configuration=Release /p:Platform=Win32

    - name: 9. Prepare Libraries for Final Linkage
      shell: pwsh
      run: |
        echo "Copying and renaming libraries for MicroSIP project..."

        # Rename the main PJSIP library to the name expected by MicroSIP (-Static suffix)
        $pjlib_actual = "lib/libpjproject-i386-Win32-vc14-Release.lib"
        $pjlib_expected = "sufficit-microsip/lib/libpjproject-i386-Win32-vc14-Release-Static.lib"
        if (Test-Path $pjlib_actual) {
            Copy-Item -Path $pjlib_actual -Destination $pjlib_expected
            echo "Copied and renamed PJSIP library to $pjlib_expected"
        } else {
            echo "FATAL: Could not find the main PJSIP library at $pjlib_actual after build."
            exit 1
        }

        # Find the Opus library built by PJSIP and copy it to the location/name expected by MicroSIP
        $opus_source = Get-Item "third_party/lib/libopus-*.lib"
        $opus_dest_dir = "sufficit-microsip/third_party/opus/Win32"
        New-Item -ItemType Directory -Force -Path $opus_dest_dir
        Copy-Item -Path $opus_source.FullName -Destination "$opus_dest_dir/opus.lib"
        echo "Copied $($opus_source.Name) to $opus_dest_dir/opus.lib"

    - name: 10. Generate Version Tag
      id: generate_version
      working-directory: ./sufficit-microsip
      run: |
        $VERSION="v$(Get-Date -Format 'yyyy.MM.dd').${{ github.run_number }}"
        echo "VERSION=$VERSION" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
      
    - name: 11. Build the final project
      working-directory: ./sufficit-microsip
      run: msbuild.exe /p:Configuration=Release /p:Platform=x86 microsip.vcxproj

    - name: 12. Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: microsip-build
        path: sufficit-microsip/Release/microsip.exe

  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - name: 1. Download build artifact
      uses: actions/download-artifact@v4
      with:
        name: microsip-build

    - name: 2. Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.build.outputs.version }}
        name: "Release ${{ needs.build.outputs.version }}"
        body: |
          Versão compilada automaticamente a partir do último push para a branch main.
        files: microsip.exe