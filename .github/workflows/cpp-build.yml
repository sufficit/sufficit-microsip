# =================================================================================================
# GitHub Actions Workflow: PJSIP Build for Windows, Linux, and Linux ARM
#
# This workflow automates the compilation of the PJSIP project for Windows (x64), Linux (x64),
# and Linux ARM (64-bit). It is triggered on pushes to the 'main' branch and automatically
# creates a tag and release for each successful build on 'main'. It also continues to be
# triggered by manually pushed version tags. Build artifacts are named
# using the UTC date and time of the build.
#
# The main change is the integration of pre-compiled Opus libraries (assuming that
# they are provided by the same company 'sufficit' via GitHub Releases), instead of
# installing system development packages or compiling Opus internally.
#
# Action Version: 1.0.68 (Fixed artifact upload 'if-no-files-found' and adjusted 'retention-days')
# Last Updated: 2025-06-18 11:40:00 AM -03
# =================================================================================================

name: C++ Build

on:
  push:
    branches:
      - main
    tags:
      - 'v*.*.*' # Trigger on version tags like v1.0.0
  workflow_dispatch: # Allows manual triggering of the workflow

env:
  # Define the GH_PAT variable for PowerShell script authentication
  # This variable must be configured as a secret in the repository.
  GH_PAT: ${{ secrets.GH_PAT }}

jobs:
  build-windows:
    runs-on: windows-2022

    steps:
      - name: Checkout main repository
        uses: actions/checkout@v4
        with:
          repository: sufficit/sufficit-microsip
          path: .
          token: ${{ secrets.GH_PAT }}
          fetch-depth: 1 # Fetch only the latest commit for faster operations
          ssh-strict: true
          ssh-user: git
          persist-credentials: true
          clean: true
          sparse-checkout-cone-mode: true
          fetch-tags: false
          show-progress: true
          lfs: false
          submodules: false
          set-safe-directory: true

      - name: Checkout pjproject repository
        uses: actions/checkout@v4
        with:
          repository: sufficit/pjproject
          path: external/pjproject
          token: ${{ secrets.GH_PAT }}
          submodules: false
          ssh-strict: true
          ssh-user: git
          persist-credentials: true
          clean: true
          sparse-checkout-cone-mode: true
          fetch-depth: 1
          fetch-tags: false
          show-progress: true
          lfs: false
          set-safe-directory: true

      - name: Get current UTC date/time and format it
        run: |
          $buildDate = (Get-Date -UFormat %Y%m%d-%H%M%S)
          Write-Host "Calculated BUILD_DATE: $buildDate"
          # Set as a workflow environment variable for subsequent steps
          Write-Host "BUILD_DATE=$buildDate" >> $env:GITHUB_ENV
        shell: pwsh

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v2
        with:
          msbuild-architecture: x64

      - name: Compile PJSIP (Windows x64)
        run: |
          # Navigate to the PJSIP directory
          Set-Location external/pjproject
          Write-Host "Current path Set-Location: $(Get-Location)"

          # Debug: Check PowerShell Version in use
          Write-Host "PowerShell Version being used:"
          $PSVersionTable | Format-List | Out-String | Write-Host

          # Download and prepare Opus libraries for PJSIP
          Write-Host "Executing scripts/download_opus_windows.ps1 for PJSIP (via temporary file)..."
          $scriptPathOpus = "$env:GITHUB_WORKSPACE/scripts/download_opus_windows.ps1"
          $tempScriptPathOpus = "temp_download_opus.ps1"
          $scriptContentOpus = Get-Content $scriptPathOpus -Raw -Encoding UTF8
          $utf8NoBomEncoding = New-Object System.Text.UTF8Encoding($false)
          Set-Content -Path $tempScriptPathOpus -Value $scriptContentOpus -Encoding $utf8NoBomEncoding
          pwsh -File $tempScriptPathOpus
          Write-Host "Scripts/download_opus_windows.ps1 completed."

          # Copy PJSIP configuration files
          Write-Host "Copying config_site.h and pjsip_extra_defines.h to PJSIP..."
          Copy-Item -Path "$env:GITHUB_WORKSPACE/scripts/config_site_content.h" -Destination "pjlib/include/pj/config_site.h" -Force
          Copy-Item -Path "$env:GITHUB_WORKSPACE/scripts/pjsip_extra_defines_content.h" -Destination "pjlib/include/pj/pjsip_extra_defines.h" -Force
          Write-Host "PJSIP configuration files copied."

          # --- NEW PART FOR EXECUTING build_pjsip.ps1 ---
          # Execute build_pjsip.ps1 dynamically from the checked out repository
          Write-Host "Executing build_pjsip.ps1 for PJSIP (via temporary file)..."
          $scriptPathPjsip = "$env:GITHUB_WORKSPACE/scripts/build_pjsip.ps1"
          $tempScriptPathPjsip = "temp_build_pjsip.ps1"
          $scriptContentPjsip = Get-Content $scriptPathPjsip -Raw -Encoding UTF8
          Set-Content -Path $tempScriptPathPjsip -Value $scriptContentPjsip -Encoding $utf8NoBomEncoding
          pwsh -File $tempScriptPathPjsip # Execute the PJSIP build script

          Write-Host "PJSIP compilation step completed."
          Set-Location $env:GITHUB_WORKSPACE
          Write-Host "Returning to MicroSIP root directory: $(Get-Location)"
        shell: pwsh

      - name: Patch MicroSIP .vcxproj file
        run: |
          $microsipVcxprojPath = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "microsip.vcxproj"
          $pjsipRoot = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "external/pjproject"
          $pjsipLib = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "external/pjproject/lib"
          $pjsipAppsInclude = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "external/pjproject/pjsip/include"
          Write-Host "Patching microsip.vcxproj at: $microsipVcxprojPath"
          Write-Host "PJSIP Root: $pjsipRoot"
          Write-Host "PJSIP Lib Path: $pjsipLib"
          Write-Host "PJSIP Apps Include Path: $pjsipAppsInclude"
          & "$env:GITHUB_WORKSPACE/scripts/patch_microsip_vcxproj.ps1" `
            -ProjFile $microsipVcxprojPath `
            -PjsipIncludeRoot "$pjsipRoot" `
            -PjsipLibRoot "$pjsipLib" `
            -PjsipAppsIncludePath "$pjsipAppsInclude"
        shell: pwsh

      - name: List PJSIP Lib Directory Contents (for debug)
        run: |
          $pjsipLibDir = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "external/pjproject/lib"
          Write-Host "Listing contents of ${pjsipLibDir}:"
          Get-ChildItem -Path $pjsipLibDir | Format-List FullName, Name, Length, CreationTimeUtc, LastWriteTimeUtc
        shell: pwsh

      - name: Compile MicroSIP Solution
        run: |
          $microsipSlnPath = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "MicroSIP.sln"
          Write-Host "Compiling MicroSIP solution: $microsipSlnPath"
          msbuild.exe "$microsipSlnPath" /p:Configuration=Release /p:Platform=x64 /m /t:Build
          if ($LASTEXITCODE -ne 0) {
              Write-Host "##[error]MicroSIP compilation failed with exit code $LASTEXITCODE."
              exit 1
          }
          Write-Host "MicroSIP compilation completed successfully."
        shell: pwsh

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: microsip-windows-x64-${{ env.BUILD_DATE }}
          # Correct paths to the built executable and its PDB, assuming they are in the specified Release directory
          path: |
            ${{ github.workspace }}\x64\Release\microsip.exe
            ${{ github.workspace }}\x64\Release\microsip.pdb
          # Fix: Change 'fail' to a valid option like 'error'
          if-no-files-found: error # Changed from 'fail' to 'error'
          # Fix: Adjust retention-days to match repository policy (e.g., 5 days)
          retention-days: 5 # Changed from 7 to 5 based on warning
          compression-level: 6
          overwrite: false
          include-hidden-files: false

  # Placeholder for future Linux build job
  # build-linux:
  #   runs-on: ubuntu-latest
  #   needs: [build-windows]
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #     - name: Build on Linux
  #       run: |
  #         echo "Linux build logic here"

  # Placeholder for future Linux ARM build job
  # build-linux-arm:
  #   runs-on: ubuntu-latest
  #   needs: [build-windows]
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #     - name: Build on Linux ARM
  #       run: |
  #         echo "Linux ARM build logic here"

  create-release:
    if: success() && startsWith(github.ref, 'refs/tags/v') # Only run if the previous job succeeded and it's a tag push
    runs-on: ubuntu-latest
    needs: [build-windows] # Ensure all build jobs that generate artifacts are listed here

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts # Downloads all artifacts into this directory

      - name: List downloaded artifacts (for debug)
        run: |
          ls -R artifacts

      - name: Get tag name
        id: get_tag
        run: echo "TAG_NAME=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
      
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2 # Use a more recent release action if available
        with:
          tag_name: ${{ env.TAG_NAME }}
          name: Release ${{ env.TAG_NAME }} (${{ env.BUILD_DATE }})
          body: |
            Automated build for tag ${{ env.TAG_NAME }} created on ${{ env.BUILD_DATE }}.
            See changelog for details.
          draft: false
          prerelease: false
          files: |
            artifacts/microsip-windows-x64-${{ env.BUILD_DATE }}/*
          # Add more lines here to include other specific files if needed