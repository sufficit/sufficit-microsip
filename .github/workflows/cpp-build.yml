# =================================================================================================
# GITHUB ACTIONS WORKFLOW FOR BUILDING THE SUFFICIT/SUFFICIT-MICROSIP PROJECT
#
# WORKFLOW VERSION: 23 (Using local config and patch script)
#
# Author: Hugo Castro de Deco, Sufficit
# Collaboration: Gemini AI for Google
# Date: June 13, 2025
# 
# This header should be updated keeping the same format on every interaction.
# Static things and recomendations for AI:
# 1º Comments in this file are always in english
# 2º WORKFLOW VERSION has to be updated by each IA interatiction
# 3º Bellow this section the IA should explain every success step on build proccess
# 4º In Order to avoid syntax errors, we have tow more files on repository root:
#  - `config_site.h`: used for includes and variables declarations
#  - `patch.ps1`: powershell script  
# Above this line the should never forget.
#
# == Explanation of Build Steps ==
#
# 1.  **Setup & Checkout**: The workflow checks out the main `sufficit-microsip` repository
#     (which includes `config_site.h` and `patch.ps1`) and clones its dependencies,
#     `pjproject` and `opus`, into separate directories.
#
# 2.  **PJSIP Configuration**: Instead of generating a file, it copies the `config_site.h`
#     from your repository root directly into the PJSIP include directory. This ensures
#     the build uses your committed configuration.
#
# 3.  **PJSIP Patching**: The workflow runs the `patch.ps1` script. This script
#     programmatically corrects the include paths within the PJSIP project files,
#     ensuring it can find the Opus library headers. This is more precise than passing
#     a global include path during the build.
#
# 4.  **Dependency Build (Opus & PJSIP)**:
#     - **Opus**: Built first using CMake.
#     - **PJSIP**: Built using `msbuild` after the configuration and patching steps are complete.
#
# 5.  **Library Consolidation**: A central `dist/lib` directory is created, and all
#     necessary `.lib` files from PJSIP and Opus are copied into it to simplify the final link.
#
# 6.  **Final Application Build (MicroSIP)**: The `microsip.vcxproj` is built, linking
#     against the libraries collected in the `dist/lib` directory.
#
# 7.  **Artifact & Release**: The final `microsip.exe` is uploaded as an artifact and then
#     used to create a versioned GitHub Release.
# =================================================================================================

name: Build C++ and Create Release

on:
  push:
    branches: [ "main" ]

jobs:
  build:
    runs-on: windows-latest
    outputs:
      version: ${{ steps.generate_version.outputs.VERSION }}

    steps:
    - name: 1. Checkout Main Repository
      uses: actions/checkout@v4
      with:
        path: sufficit-microsip

    - name: 2. Clone PJSIP Repository
      uses: actions/checkout@v4
      with:
        repository: pjsip/pjproject
        path: pjproject
    
    - name: 3. Clone Opus Repository
      uses: actions/checkout@v4
      with:
        repository: xiph/opus
        path: opus-source

    - name: 4. Copy PJSIP config_site.h
      shell: pwsh
      run: |
        Copy-Item -Path "sufficit-microsip/config_site.h" -Destination "pjproject/pjlib/include/pj/config_site.h"
        
    - name: 5. Patch PJSIP Project File for Opus
      shell: pwsh
      working-directory: ./pjproject
      run: |
        # This script needs to be run from within the pjproject directory
        # It references a file in the parent directory (sufficit-microsip)
        ../sufficit-microsip/patch.ps1

    - name: 6. Build Opus Library
      shell: pwsh
      run: |
        cmake -S opus-source -B opus-build -G "Visual Studio 17 2022" -A Win32
        cmake --build opus-build --config Release

    - name: 7. Add MSBuild to path
      uses: microsoft/setup-msbuild@v2

    - name: 8. Build PJSIP Solution
      shell: pwsh
      run: |
        # The patch script has already fixed the include paths, so we no longer need to pass them here.
        msbuild.exe pjproject/pjproject-vs14.sln /p:Configuration=Release /p:Platform=Win32

    - name: 9. Prepare Libraries for Final Build
      shell: pwsh
      run: |
        echo "--- Collecting all libraries for MicroSIP ---"
        # Create a single distribution directory for all final libraries
        $dist_dir = "dist/lib"
        New-Item -ItemType Directory -Force -Path $dist_dir
        
        # Copy the necessary PJSIP libraries from their output folder
        Copy-Item -Path pjproject/lib/*.lib -Destination $dist_dir
        
        # Copy the Opus library from its output folder
        Copy-Item -Path opus-build/Release/opus.lib -Destination $dist_dir
        
        echo "Libraries collected in $dist_dir"
        Get-ChildItem $dist_dir
        
    - name: 10. Generate Version Tag
      id: generate_version
      shell: bash
      run: echo "VERSION=v$(date +'%Y.%m.%d').${{ github.run_number }}" >> $GITHUB_OUTPUT
      
    - name: 11. Build the final project
      working-directory: ./sufficit-microsip
      run: |
        # Build the main project, passing the absolute path to our library collection
        msbuild.exe microsip.vcxproj /p:Configuration=Release /p:Platform=x86 /p:AdditionalLibraryDirectories="../dist/lib"

    - name: 12. Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: microsip-build
        path: sufficit-microsip/Release/microsip.exe

  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - name: 1. Download build artifact
      uses: actions/download-artifact@v4
      with:
        name: microsip-build
    - name: 2. Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.build.outputs.version }}
        name: "Release ${{ needs.build.outputs.version }}"
        body: "Versão compilada automaticamente a partir do último push para a branch main."
        files: microsip.exe
