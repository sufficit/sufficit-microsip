# =================================================================================================
# GITHUB ACTIONS WORKFLOW FOR BUILDING THE SUFFICIT/SUFFICIT-MICROSIP PROJECT
#
# Author: Hugo Castro de Deco, Sufficit
# Collaboration: Gemini AI for Google
# Date: June 12, 2025
#
# == Workflow Logic and Execution Steps ==
#
# This workflow automates the build of the MicroSIP C++ project from source, including its key
# dependencies. Each step is designed to correctly prepare the environment for a successful build.
#
# 1.  **Checkout Repositories:**
#     - Checks out the main `sufficit-microsip`, `pjsip/pjproject`, and `xiph/opus` repositories.
#
# 2.  **Prepare PJSIP Source & Dependencies:**
#     - Moves the PJSIP source files to the workspace root to match the project's expected
#       relative include paths (e.g., `..\pjlib`, `..\pjsip`).
#     - Generates the mandatory PJSIP configuration file `pjlib/include/pj/config_site.h`.
#     - Copies the Opus header files into the `third_party/opus/include` directory, making them
#       available for the PJSIP build process.
#
# 3.  **Setup Build Environment & Build Dependencies:**
#     - Configures the MSBuild environment.
#     - Compiles the entire PJSIP solution to produce its libraries (.lib files).
#     - Compiles the Opus source code to produce `opus.lib`.
#     - Copies the compiled `opus.lib` to `third_party/opus/lib/` and also creates a copy named
#       `libopus.a` to satisfy the PJSIP linker's expectations.
#
# 4.  **Build and Release the Main Project:**
#     - The final steps generate a version tag, run the MSBuild command for the main project,
#       upload the resulting .exe as an artifact, and create a GitHub Release.
# =================================================================================================

name: Build C++ and Create Release

on:
  push:
    branches: [ "main" ]

jobs:
  build:
    runs-on: windows-latest
    outputs:
      version: ${{ steps.generate_version.outputs.VERSION }}

    steps:
    - name: 1. Checkout MicroSip Repository
      uses: actions/checkout@v4
      with:
        path: sufficit-microsip

    - name: 2. Clone PJSIP Repository
      uses: actions/checkout@v4
      with:
        repository: pjsip/pjproject
        path: pjproject

    - name: 3. Clone Opus Repository
      uses: actions/checkout@v4
      with:
        repository: xiph/opus
        path: opus-source

    - name: 4. Restructure PJSIP directories
      shell: pwsh
      run: |
        Move-Item -Path ${{ github.workspace }}\pjproject\* -Destination ${{ github.workspace }}\
        Remove-Item -Path ${{ github.workspace }}\pjproject -Recurse -Force

    - name: 5. Create PJSIP config_site.h
      shell: pwsh
      run: |
        $config = @"
        #define PJ_WIN32 1
        #include <windows.h>
        #define PJ_HAS_IPV6 1
        #define PJSUA_MAX_ACC 10
        #define PJSUA_MAX_CALLS 32
        #define PJMEDIA_HAS_G729_CODEC 1
        #define PJMEDIA_HAS_ILBC_CODEC 1
        #define PJMEDIA_HAS_SPEEX_CODEC 1
        #define PJMEDIA_HAS_SPEEX_AEC 1
        #define PJMEDIA_HAS_OPUS_CODEC 1
        #define PJMEDIA_HAS_VIDEO 0
        #define PJMEDIA_VIDEO_DEV_HAS_SDL 0
        #define PJMEDIA_VIDEO_DEV_HAS_DSHOW 0
        #define PJ_LOG_MAX_LEVEL 3
        #define PJMEDIA_AUD_MAX_DEVS 64
        "@
        Set-Content -Path "${{ github.workspace }}\pjlib\include\pj\config_site.h" -Value $config

    - name: 6. Prepare Opus Headers for PJSIP build
      shell: pwsh
      run: |
        $dest_dir = "third_party/opus/include"
        New-Item -ItemType Directory -Force -Path $dest_dir
        Copy-Item -Path opus-source/include/* -Destination $dest_dir -Recurse

    - name: 7. Add MSBuild to path
      uses: microsoft/setup-msbuild@v2

    - name: 8. Build PJSIP Libraries
      shell: pwsh
      run: |
        echo "Building PJSIP solution..."
        msbuild.exe pjproject-vs14.sln /p:Configuration=Release /p:Platform=Win32

    - name: 9. Build Opus Library
      shell: pwsh
      run: |
        echo "Building Opus library..."
        cmake -S opus-source -B opus-build -G "Visual Studio 17 2022" -A Win32
        cmake --build opus-build --config Release

    # ===================== PASSO 10 CORRIGIDO =====================
    - name: 10. Copy Opus library to expected locations
      shell: pwsh
      run: |
        echo "Copying opus.lib to third_party folder for main project and PJSIP..."
        
        # Path for the main microsip project
        $main_lib_dir = "sufficit-microsip/third_party/opus/Win32"
        New-Item -ItemType Directory -Force -Path $main_lib_dir
        Copy-Item -Path "opus-build/Release/opus.lib" -Destination $main_lib_dir

        # Path for the pjsip sub-projects, which expect a different structure and name
        $pjsip_lib_dir = "third_party/opus/lib"
        New-Item -ItemType Directory -Force -Path $pjsip_lib_dir
        Copy-Item -Path "opus-build/Release/opus.lib" -Destination "$pjsip_lib_dir/opus.lib"
        Copy-Item -Path "opus-build/Release/opus.lib" -Destination "$pjsip_lib_dir/libopus.a"
        
        echo "Opus libraries copied and renamed."

    - name: 11. Generate Version Tag
      id: generate_version
      working-directory: ./sufficit-microsip
      run: |
        $VERSION="v$(Get-Date -Format 'yyyy.MM.dd').${{ github.run_number }}"
        echo "VERSION=$VERSION" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
      
    - name: 12. Build the project
      working-directory: ./sufficit-microsip
      run: msbuild.exe /p:Configuration=Release /p:Platform=x86 microsip.vcxproj

    - name: 13. Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: microsip-build
        path: sufficit-microsip/Release/microsip.exe

  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - name: 1. Download build artifact
      uses: actions/download-artifact@v4
      with:
        name: microsip-build

    - name: 2. Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.build.outputs.version }}
        name: "Release ${{ needs.build.outputs.version }}"
        body: |
          Versão compilada automaticamente a partir do último push para a branch main.
        files: microsip.exe