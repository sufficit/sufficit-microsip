# =================================================================================================
# GITHUB ACTIONS WORKFLOW FOR BUILDING THE SUFFICIT/SUFFICIT-MICROSIP PROJECT
#
# Author: Hugo Castro de Deco, Sufficit
# Collaboration: Gemini AI for Google
# Date: June 12, 2025
#
# == Workflow Logic and Execution Steps ==
#
# This workflow automates the build of the MicroSIP C++ project from source, including its key
# dependencies. Each step is designed to correctly prepare the environment for a successful build.
#
# 1.  **Checkout Repositories:**
#     - Checks out the main `sufficit-microsip` project.
#     - Checks out the `pjsip/pjproject`.
#     - **Crucially, checks out the `xiph/opus` source code directly into the location where
#       the PJSIP build system expects to find it (`pjproject/third_party/opus`).**
#
# 2.  **Prepare PJSIP Source:**
#     - Moves the PJSIP source files to the workspace root to match the project's expected
#       relative include paths (e.g., `..\pjlib`). This also brings the Opus source along.
#     - Generates the mandatory PJSIP configuration file `pjlib/include/pj/config_site.h` to
#       enable the required codecs.
#
# 3.  **Setup Build Environment & Build ALL Dependencies:**
#     - Configures the MSBuild environment.
#     - A single build command for `pjproject-vs14.sln` is now used. Because the Opus source is
#       in the correct location, the PJSIP solution will build Opus automatically along with
#       all other PJSIP libraries.
#
# 4.  **Build and Release the Main Project:**
#     - After PJSIP and all its dependencies are built, we need to copy the necessary libraries
#       to the locations expected by the main MicroSIP project.
#     - Finally, the MicroSIP project itself is built, and the resulting .exe is released.
# =================================================================================================

name: Build C++ and Create Release

on:
  push:
    branches: [ "main" ]

jobs:
  build:
    runs-on: windows-latest
    outputs:
      version: ${{ steps.generate_version.outputs.VERSION }}

    steps:
    - name: 1. Checkout MicroSip Repository
      uses: actions/checkout@v4
      with:
        path: sufficit-microsip

    - name: 2. Clone PJSIP Repository
      uses: actions/checkout@v4
      with:
        repository: pjsip/pjproject
        path: pjproject

    # Passo 3: Baixa o Opus DIRETAMENTE no local esperado pela PJSIP
    - name: 3. Clone Opus into PJSIP third_party
      uses: actions/checkout@v4
      with:
        repository: xiph/opus
        path: pjproject/third_party/opus

    - name: 4. Restructure PJSIP directories
      shell: pwsh
      run: |
        Move-Item -Path ${{ github.workspace }}\pjproject\* -Destination ${{ github.workspace }}\
        Remove-Item -Path ${{ github.workspace }}\pjproject -Recurse -Force

    - name: 5. Create PJSIP config_site.h
      shell: pwsh
      run: |
        $config = @"
        #define PJ_WIN32 1
        #include <windows.h>
        #define PJ_HAS_IPV6 1
        #define PJSUA_MAX_ACC 10
        #define PJSUA_MAX_CALLS 32
        #define PJMEDIA_HAS_G729_CODEC 1
        #define PJMEDIA_HAS_ILBC_CODEC 1
        #define PJMEDIA_HAS_SPEEX_CODEC 1
        #define PJMEDIA_HAS_SPEEX_AEC 1
        #define PJMEDIA_HAS_OPUS_CODEC 1
        #define PJMEDIA_HAS_VIDEO 0
        #define PJMEDIA_VIDEO_DEV_HAS_SDL 0
        #define PJMEDIA_VIDEO_DEV_HAS_DSHOW 0
        #define PJ_LOG_MAX_LEVEL 3
        #define PJMEDIA_AUD_MAX_DEVS 64
        "@
        Set-Content -Path "${{ github.workspace }}\pjlib\include\pj\config_site.h" -Value $config

    - name: 6. Add MSBuild to path
      uses: microsoft/setup-msbuild@v2

    # Passo 7: Compila a PJSIP e suas dependências (incluindo Opus) de uma só vez
    - name: 7. Build PJSIP and its Dependencies
      shell: pwsh
      # Permite que o build continue mesmo se os projetos de teste/amostra falharem.
      continue-on-error: true
      run: |
        echo "Building the entire PJSIP solution..."
        msbuild.exe pjproject-vs14.sln /p:Configuration=Release /p:Platform=Win32

    # Passo 8: Copia as libs necessárias da PJSIP e do Opus para a pasta do projeto principal
    - name: 8. Copy all required libraries for MicroSIP
      shell: pwsh
      run: |
        echo "Copying PJSIP libraries..."
        Copy-Item -Path lib/libpjproject-*.lib -Destination sufficit-microsip/lib/
        
        echo "Copying third-party libraries built by PJSIP..."
        $dest_dir = "sufficit-microsip/third_party/lib"
        New-Item -ItemType Directory -Force -Path $dest_dir
        Copy-Item -Path third_party/lib/*.lib -Destination $dest_dir
        
        echo "Copying Opus library to its specific folder..."
        $opus_dir = "sufficit-microsip/third_party/opus/Win32"
        New-Item -ItemType Directory -Force -Path $opus_dir
        Copy-Item -Path third_party/lib/libopus-*.lib -Destination "$opus_dir/opus.lib"

    - name: 9. Generate Version Tag
      id: generate_version
      working-directory: ./sufficit-microsip
      run: |
        $VERSION="v$(Get-Date -Format 'yyyy.MM.dd').${{ github.run_number }}"
        echo "VERSION=$VERSION" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
      
    - name: 10. Build the project
      working-directory: ./sufficit-microsip
      run: msbuild.exe /p:Configuration=Release /p:Platform=x86 microsip.vcxproj

    - name: 11. Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: microsip-build
        path: sufficit-microsip/Release/microsip.exe

  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - name: 1. Download build artifact
      uses: actions/download-artifact@v4
      with:
        name: microsip-build

    - name: 2. Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.build.outputs.version }}
        name: "Release ${{ needs.build.outputs.version }}"
        body: |
          Versão compilada automaticamente a partir do último push para a branch main.
        files: microsip.exe