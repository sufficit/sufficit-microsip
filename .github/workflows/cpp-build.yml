# =================================================================================================
# GITHUB ACTIONS WORKFLOW FOR BUILDING THE SUFFICIT/SUFFICIT-MICROSIP PROJECT
#
# WORKFLOW VERSION: 14 (Final - Patching Strategy)
#
# Author: Hugo Castro de Deco, Sufficit
# Collaboration: Gemini AI for Google
# Date: June 12, 2025
#
# == Logic and Execution Steps (Final Reviewed Version) ==
#
# This workflow returns to the most direct strategy: patching the broken PJSIP project file
# before compilation, using a syntactically robust script to avoid all previous YAML/shell errors.
#
# 1.  **Setup (Steps 1-4):** All sources are checked out, with Opus placed directly inside PJSIP's
#     third_party directory as the PJSIP solution expects.
#
# 2.  **Configuration (Step 5):** The mandatory `config_site.h` is created with all necessary defines,
#     including the Opus bitrate which was previously missing.
#
# 3.  **Patch PJSIP Project (Step 6):** THIS IS THE CRITICAL FIX. A robust PowerShell script
#     programmatically edits the `pjmedia-codec.vcxproj` file. It adds the correct include path
#     to the Opus headers (`../../third_party/opus/include`), resolving the `C1083: Cannot open
#     include file` error at its root.
#
# 4.  **Unified Build (Step 8):** A single `msbuild` command on the solution file. Because of the
#     patch, this command is now expected to succeed completely, without errors and without
#     needing `continue-on-error`.
#
# 5.  **Finalize (Steps 9-13):** With all libraries correctly built by PJSIP, the final steps
#     copy the required artifacts for the `microsip.vcxproj` build, which is now expected to succeed.
# =================================================================================================

name: Build C++ and Create Release

on:
  push:
    branches: [ "main" ]

jobs:
  build:
    runs-on: windows-latest
    outputs:
      version: ${{ steps.generate_version.outputs.VERSION }}

    steps:
    - name: 1. Checkout MicroSip Repository
      uses: actions/checkout@v4
      with:
        repository: sufficit/sufficit-microsip
        path: sufficit-microsip

    - name: 2. Clone PJSIP Repository
      uses: actions/checkout@v4
      with:
        repository: pjsip/pjproject
        path: pjproject
    
    - name: 3. Clone Opus into PJSIP third_party
      uses: actions/checkout@v4
      with:
        repository: xiph/opus
        path: pjproject/third_party/opus

    - name: 4. Restructure PJSIP directories
      shell: pwsh
      run: |
        Move-Item -Path ${{ github.workspace }}\pjproject\* -Destination ${{ github.workspace }}\
        Remove-Item -Path ${{ github.workspace }}\pjproject -Recurse -Force

    - name: 5. Create PJSIP config_site.h
      shell: pwsh
      run: |
        $config = @"
#define PJ_WIN32 1
#include <windows.h>
#define PJ_HAS_IPV6 1
#define PJMEDIA_HAS_OPUS_CODEC 1
#define PJMEDIA_OPUS_DEFAULT_BIT_RATE 32000
#define PJ_LOG_MAX_LEVEL 4
"@
        Set-Content -Path "${{ github.workspace }}\pjlib\include\pj\config_site.h" -Value $config
        echo "Created pjlib/include/pj/config_site.h with Opus enabled."

    - name: 6. Patch pjmedia-codec.vcxproj to add Opus include path
      shell: pwsh
      run: |
        $projFile = "pjmedia/build/pjmedia_codec.vcxproj"
        echo "Loading project file to patch: $projFile"
        $xml = [xml](Get-Content $projFile)
        
        # This literal here-string is the only 100% safe way to define this string in YAML/PowerShell
        $targetCondition = @'
'$(Configuration)|$(Platform)'=='Release|Win32'
'@
        $patched = $false
        
        # Loop through all configuration groups in the project file
        foreach ($group in $xml.Project.ItemDefinitionGroup) {
            if ($group.Condition -eq $targetCondition) {
                echo "Found 'Release|Win32' configuration. Patching..."
                $includeDirsNode = $group.ClCompile.AdditionalIncludeDirectories
                $currentIncludes = $includeDirsNode.'#text'
                $newIncludes = $currentIncludes + ";../../third_party/opus/include"
                $includeDirsNode.'#text' = $newIncludes
                echo "Successfully patched include path. New path is: $newIncludes"
                $patched = $true
                break
            }
        }
        
        if (-not $patched) {
            echo "FATAL: Could not find 'Release|Win32' configuration in $projFile to patch."
            exit 1
        }
        
        $xml.Save($projFile)
        echo "Saved updated project file: $projFile"
        
    - name: 7. Add MSBuild to path
      uses: microsoft/setup-msbuild@v2

    - name: 8. Build Entire PJSIP Solution
      shell: pwsh
      run: |
        echo "Building the entire PJSIP solution (pjproject-vs14.sln)..."
        msbuild.exe pjproject-vs14.sln /p:Configuration=Release /p:Platform=Win32

    - name: 9. Copy Libraries for Final Build
      shell: pwsh
      run: |
        echo "--- Preparing all required libraries for MicroSIP ---"
        $microsip_lib_dir = "sufficit-microsip/lib"
        New-Item -ItemType Directory -Force -Path $microsip_lib_dir
        
        $microsip_opus_dir = "sufficit-microsip/third_party/opus/Win32"
        New-Item -ItemType Directory -Force -Path $microsip_opus_dir

        # The PJSIP build will have created libopus in its own lib dir. Copy it.
        Copy-Item -Path "third_party/lib/libopus-*.lib" -Destination $microsip_opus_dir/opus.lib -Force
        echo "Copied Opus library for MicroSIP."

        # The PJSIP build creates the aggregated lib. Copy and rename it.
        $pjlib_source = Get-Item "lib/libpjproject-i386-Win32-vc14-Release.lib"
        $pjlib_dest_renamed = "$microsip_lib_dir/libpjproject-i386-Win32-vc14-Release-Static.lib"
        Copy-Item -Path $pjlib_source.FullName -Destination $pjlib_dest_renamed -Force
        echo "Copied and Renamed main PJSIP library."

    - name: 10. Generate Version Tag
      id: generate_version
      working-directory: ./sufficit-microsip
      run: |
        $VERSION="v$(Get-Date -Format 'yyyy.MM.dd').${{ github.run_number }}"
        echo "VERSION=$VERSION" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
      
    - name: 11. Build the final project
      working-directory: ./sufficit-microsip
      run: msbuild.exe /p:Configuration=Release /p:Platform=x86 microsip.vcxproj

    - name: 12. Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: microsip-build
        path: sufficit-microsip/Release/microsip.exe

  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - name: 1. Download build artifact
      uses: actions/download-artifact@v4
      with:
        name: microsip-build

    - name: 2. Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.build.outputs.version }}
        name: "Release ${{ needs.build.outputs.version }}"
        body: |
          Versão compilada automaticamente a partir do último push para a branch main.
        files: microsip.exe