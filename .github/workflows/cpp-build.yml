# =================================================================================================
# GITHUB ACTIONS WORKFLOW FOR BUILDING THE SUFFICIT/SUFFICIT-MICROSIP PROJECT
#
# WORKFLOW VERSION: 21 (Definitive "No-Move" Strategy)
#
# Author: Hugo Castro de Deco, Sufficit
# Collaboration: Gemini AI for Google
# Date: June 13, 2025
#
# == Logic and Execution Steps ==
#
# This workflow ABANDONS all file-moving. It keeps each repository in its own clean
# directory and uses relative paths and a final distribution folder to link everything.
# It is self-contained and requires no pre-existing files in the repo besides the source.
# =================================================================================================

name: Build C++ and Create Release

on:
  push:
    branches: [ "main" ]

jobs:
  build:
    runs-on: windows-latest
    outputs:
      version: ${{ steps.generate_version.outputs.VERSION }}

    steps:
    - name: 1. Checkout Main Repository
      uses: actions/checkout@v4
      with:
        path: sufficit-microsip

    - name: 2. Clone PJSIP Repository
      uses: actions/checkout@v4
      with:
        repository: pjsip/pjproject
        path: pjproject
    
    - name: 3. Clone Opus Repository
      uses: actions/checkout@v4
      with:
        repository: xiph/opus
        path: opus-source

    - name: 4. Create PJSIP config_site.h
      shell: pwsh
      run: |
        @"
#define PJ_WIN32 1
#include <windows.h>
#define PJ_HAS_IPV6 1
#define PJMEDIA_HAS_OPUS_CODEC 1
#define PJMEDIA_HAS_G729_CODEC 1
#define PJMEDIA_HAS_ILBC_CODEC 1
#define PJMEDIA_HAS_SPEEX_CODEC 1
#define PJMEDIA_HAS_SPEEX_AEC 1
#define PJMEDIA_VIDEO_DEV_HAS_SDL 0
#define PJMEDIA_VIDEO_DEV_HAS_DSHOW 0
#define PJ_LOG_MAX_LEVEL 4
#define PJSUA_MAX_ACC 10
#define PJSUA_MAX_CALLS 32
#define PJMEDIA_OPUS_DEFAULT_BIT_RATE 32000
"@ | Set-Content -Path "pjproject/pjlib/include/pj/config_site.h"

    - name: 5. Build Opus Library
      shell: pwsh
      run: |
        cmake -S opus-source -B opus-build -G "Visual Studio 17 2022" -A Win32
        cmake --build opus-build --config Release

    - name: 6. Add MSBuild to path
      uses: microsoft/setup-msbuild@v2

    - name: 7. Build PJSIP Solution
      shell: pwsh
      run: |
        # Build a specific project from the solution to ensure Opus is handled correctly
        # This command is run from the root, but targets the project inside ./pjproject
        # It passes the Opus include path directly to the compiler. This is the key fix.
        msbuild.exe pjproject/pjproject-vs14.sln /p:Configuration=Release /p:Platform=Win32 /p:AdditionalIncludeDirectories="../opus-source/include"

    - name: 8. Prepare Libraries for Final Build
      shell: pwsh
      run: |
        echo "--- Collecting all libraries for MicroSIP ---"
        # Create a single distribution directory for all final libraries
        $dist_dir = "dist/lib"
        New-Item -ItemType Directory -Force -Path $dist_dir
        
        # Copy the necessary PJSIP libraries from their output folder
        Copy-Item -Path pjproject/lib/*.lib -Destination $dist_dir
        
        # Copy the Opus library from its output folder
        Copy-Item -Path opus-build/Release/opus.lib -Destination $dist_dir
        
        echo "Libraries collected in $dist_dir"
        Get-ChildItem $dist_dir
        
    - name: 9. Generate Version Tag
      id: generate_version
      shell: bash
      run: echo "VERSION=v$(date +'%Y.%m.%d').${{ github.run_number }}" >> $GITHUB_OUTPUT
      
    - name: 10. Build the final project
      working-directory: ./sufficit-microsip
      run: |
        # Build the main project, passing the absolute path to our library collection
        msbuild.exe microsip.vcxproj /p:Configuration=Release /p:Platform=x86 /p:AdditionalLibraryDirectories="../dist/lib"

    - name: 11. Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: microsip-build
        path: sufficit-microsip/Release/microsip.exe

  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - name: 1. Download build artifact
      uses: actions/download-artifact@v4
      with:
        name: microsip-build
    - name: 2. Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.build.outputs.version }}
        name: "Release ${{ needs.build.outputs.version }}"
        body: "Versão compilada automaticamente a partir do último push para a branch main."
        files: microsip.exe