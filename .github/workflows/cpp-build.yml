# =================================================================================================
# GITHUB ACTIONS WORKFLOW FOR BUILDING THE SUFFICIT/SUFFICIT-MICROSIP PROJECT
#
# WORKFLOW VERSION: 2
#
# Author: Hugo Castro de Deco, Sufficit
# Collaboration: Gemini AI for Google
# Date: June 12, 2025
#
# == Workflow Logic and Execution Steps ==
#
# 1.  **Checkout Repositories:**
#     - Checks out all necessary source codes: MicroSIP, PJSIP, and Opus.
#
# 2.  **Prepare PJSIP Source:**
#     - Reorganizes PJSIP files and creates the mandatory `config_site.h`.
#
# 3.  **Build and Prepare Opus Dependency (CRITICAL STEP):**
#     - Compiles the Opus source code into `opus.lib` using CMake.
#     - **Prepares Headers:** Copies the Opus headers (`.h` files) to `third_party/opus/`, which is
#       the exact location the PJSIP compiler will look inside for `opus/opus.h`.
#     - **Prepares Libraries:**
#       - Copies `opus.lib` and renames it to `libopus.a` in `third_party/lib/`, fixing the PJSIP
#         linker error.
#       - Copies `opus.lib` to `sufficit-microsip/third_party/opus/Win32/`, fixing the main
#         project's linker error.
#
# 4.  **Build PJSIP & Final Project:**
#     - With all Opus dependencies correctly in place, the entire PJSIP solution is built.
#     - The final MicroSIP project is then built, linking against all the libraries we created.
# =================================================================================================

name: Build C++ and Create Release

on:
  push:
    branches: [ "main" ]

jobs:
  build:
    runs-on: windows-latest
    outputs:
      version: ${{ steps.generate_version.outputs.VERSION }}

    steps:
    - name: 1. Checkout MicroSip Repository
      uses: actions/checkout@v4
      with:
        path: sufficit-microsip

    - name: 2. Clone PJSIP Repository
      uses: actions/checkout@v4
      with:
        repository: pjsip/pjproject
        path: pjproject

    - name: 3. Clone Opus Repository
      uses: actions/checkout@v4
      with:
        repository: xiph/opus
        path: opus-source

    - name: 4. Restructure PJSIP directories
      shell: pwsh
      run: |
        Move-Item -Path ${{ github.workspace }}\pjproject\* -Destination ${{ github.workspace }}\
        Remove-Item -Path ${{ github.workspace }}\pjproject -Recurse -Force

    - name: 5. Create PJSIP config_site.h
      shell: pwsh
      run: |
        $config = @"
        #define PJ_WIN32 1
        #include <windows.h>
        #define PJ_HAS_IPV6 1
        #define PJSUA_MAX_ACC 10
        #define PJSUA_MAX_CALLS 32
        #define PJMEDIA_HAS_G729_CODEC 1
        #define PJMEDIA_HAS_ILBC_CODEC 1
        #define PJMEDIA_HAS_SPEEX_CODEC 1
        #define PJMEDIA_HAS_SPEEX_AEC 1
        #define PJMEDIA_HAS_OPUS_CODEC 1
        #define PJMEDIA_HAS_VIDEO 0
        #define PJMEDIA_VIDEO_DEV_HAS_SDL 0
        #define PJMEDIA_VIDEO_DEV_HAS_DSHOW 0
        #define PJ_LOG_MAX_LEVEL 3
        #define PJMEDIA_AUD_MAX_DEVS 64
        "@
        Set-Content -Path "${{ github.workspace }}\pjlib\include\pj\config_site.h" -Value $config

    - name: 6. Add MSBuild to path
      uses: microsoft/setup-msbuild@v2

    # CRITICAL STEP: Build and distribute Opus artifacts BEFORE building PJSIP
    - name: 7. Build and Prepare Opus Dependency
      shell: pwsh
      run: |
        echo "Building Opus with CMake..."
        cmake -S opus-source -B opus-build -G "Visual Studio 17 2022" -A Win32
        cmake --build opus-build --config Release
        
        echo "Preparing Opus headers for PJSIP..."
        # PJSIP's compiler looks for the path "opus/opus.h" inside the "third_party" include directory.
        # This command creates `third_party/opus/` and copies the header files into it.
        $header_dest = "third_party/opus"
        New-Item -ItemType Directory -Force -Path $header_dest
        Copy-Item -Path opus-source/include/. -Destination $header_dest -Recurse

        echo "Preparing Opus libraries for PJSIP and main project..."
        # PJSIP's sample apps link against 'libopus.a' and look in 'third_party/lib'.
        $pjsip_lib_dest = "third_party/lib"
        New-Item -ItemType Directory -Force -Path $pjsip_lib_dest
        Copy-Item -Path "opus-build/Release/opus.lib" -Destination "$pjsip_lib_dest/libopus.a"

        # The main MicroSIP project links against 'opus.lib' in its own specific folder.
        $main_lib_dest = "sufficit-microsip/third_party/opus/Win32"
        New-Item -ItemType Directory -Force -Path $main_lib_dest
        Copy-Item -Path "opus-build/Release/opus.lib" -Destination $main_lib_dest

    - name: 8. Build PJSIP Libraries
      shell: pwsh
      # PJSIP's sample apps might still fail, but the libraries should be created successfully now.
      continue-on-error: true
      run: |
        echo "Building the entire PJSIP solution..."
        msbuild.exe pjproject-vs14.sln /p:Configuration=Release /p:Platform=Win32
    
    - name: 9. Copy PJSIP libraries for Final Linkage
      shell: pwsh
      run: |
        echo "Copying PJSIP libraries for MicroSIP project..."
        Copy-Item -Path lib/libpjproject-*.lib -Destination sufficit-microsip/lib/
      
    - name: 10. Generate Version Tag
      id: generate_version
      working-directory: ./sufficit-microsip
      run: |
        $VERSION="v$(Get-Date -Format 'yyyy.MM.dd').${{ github.run_number }}"
        echo "VERSION=$VERSION" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
      
    - name: 11. Build the final project
      working-directory: ./sufficit-microsip
      run: msbuild.exe /p:Configuration=Release /p:Platform=x86 microsip.vcxproj

    - name: 12. Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: microsip-build
        path: sufficit-microsip/Release/microsip.exe

  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - name: 1. Download build artifact
      uses: actions/download-artifact@v4
      with:
        name: microsip-build

    - name: 2. Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.build.outputs.version }}
        name: "Release ${{ needs.build.outputs.version }}"
        body: |
          Versão compilada automaticamente a partir do último push para a branch main.
        files: microsip.exe