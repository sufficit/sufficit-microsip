# =================================================================================================
# GITHUB ACTIONS WORKFLOW FOR BUILDING THE SUFFICIT/SUFFICIT-MICROSIP PROJECT
#
# WORKFLOW VERSION: 22 (Definitive "No-Move" Strategy)
#
# Author: Hugo Castro de Deco, Sufficit
# Collaboration: Gemini AI for Google
# Date: June 13, 2025
# 
# This header should be updated keeping the same format on every interaction.
# Static things and recomendations for AI:
# 1º Comments in this file are always in english
# 2º WORKFLOW VERSION has to be updated by each IA interatiction
# 3º Bellow this section the IA should explain every success step on build proccess
# 
# Above this line the should never forget.
#
# == Logic and Execution Steps ==
#
# This workflow ABANDONS all file-moving. It keeps each repository in its own clean
# directory and uses relative paths and a final distribution folder to link everything.
# It is self-contained and requires no pre-existing files in the repo besides the source.
#
# == Explanation of Build Steps ==
#
# 1.  **Setup & Checkout**: The workflow starts by setting up a Windows environment.
#     It checks out the main `sufficit-microsip` repository and clones its two core
#     dependencies, `pjproject` and `opus`, into separate sibling directories.
#     - sufficit-microsip/
#     - pjproject/
#     - opus-source/
#
# 2.  **PJSIP Configuration**: A `config_site.h` file is dynamically created for PJSIP.
#     This is a crucial step to enable specific features like IPv6 and various audio
#     codecs (Opus, G.729, etc.) required by MicroSIP.
#
# 3.  **Dependency Build (Opus & PJSIP)**:
#     - **Opus**: It's built first using CMake and "Visual Studio 17 2022". The resulting
#       `opus.lib` file is placed in `opus-build/Release/`.
#     - **PJSIP**: The PJSIP Visual Studio solution is then built using `msbuild`. The key
#       part of this step is passing the `AdditionalIncludeDirectories` path pointing
#       to the Opus source. This tells the PJSIP compiler where to find the Opus
#       header files, resolving a common compilation dependency issue.
#
# 4.  **Library Consolidation**: To simplify the final linking stage, a central `dist/lib`
#     directory is created. All the necessary library files (`.lib`) from both PJSIP
#     and Opus are copied into this single location. This avoids complex relative
#     path calculations in the final build command.
#
# 5.  **Final Application Build (MicroSIP)**: The workflow navigates into the
#     `sufficit-microsip` directory and runs `msbuild` on the `microsip.vcxproj` file.
#     It points the `AdditionalLibraryDirectories` to the `../dist/lib` folder created
#     in the previous step. This allows the linker to find all the required PJSIP and
#     Opus libraries to successfully build the final `microsip.exe`.
#
# 6.  **Artifact & Release**: The compiled `microsip.exe` is uploaded as a build artifact
#     for debugging and archival. A parallel `release` job then downloads this artifact
#     and creates a new, versioned GitHub Release, attaching the executable for easy
#     distribution.
# =================================================================================================

name: Build C++ and Create Release

on:
  push:
    branches: [ "main" ]

jobs:
  build:
    runs-on: windows-latest
    outputs:
      version: ${{ steps.generate_version.outputs.VERSION }}

    steps:
    - name: 1. Checkout Main Repository
      uses: actions/checkout@v4
      with:
        path: sufficit-microsip

    - name: 2. Clone PJSIP Repository
      uses: actions/checkout@v4
      with:
        repository: pjsip/pjproject
        path: pjproject
    
    - name: 3. Clone Opus Repository
      uses: actions/checkout@v4
      with:
        repository: xiph/opus
        path: opus-source

    - name: 4. Create PJSIP config_site.h
      shell: pwsh
      run: |
        @"
#define PJ_WIN32 1
#include <windows.h>
#define PJ_HAS_IPV6 1
#define PJMEDIA_HAS_OPUS_CODEC 1
#define PJMEDIA_HAS_G729_CODEC 1
#define PJMEDIA_HAS_ILBC_CODEC 1
#define PJMEDIA_HAS_SPEEX_CODEC 1
#define PJMEDIA_HAS_SPEEX_AEC 1
#define PJMEDIA_VIDEO_DEV_HAS_SDL 0
#define PJMEDIA_VIDEO_DEV_HAS_DSHOW 0
#define PJ_LOG_MAX_LEVEL 4
#define PJSUA_MAX_ACC 10
#define PJSUA_MAX_CALLS 32
#define PJMEDIA_OPUS_DEFAULT_BIT_RATE 32000
"@ | Set-Content -Path "pjproject/pjlib/include/pj/config_site.h"

    - name: 5. Build Opus Library
      shell: pwsh
      run: |
        cmake -S opus-source -B opus-build -G "Visual Studio 17 2022" -A Win32
        cmake --build opus-build --config Release

    - name: 6. Add MSBuild to path
      uses: microsoft/setup-msbuild@v2

    - name: 7. Build PJSIP Solution
      shell: pwsh
      run: |
        # Build a specific project from the solution to ensure Opus is handled correctly
        # This command is run from the root, but targets the project inside ./pjproject
        # It passes the Opus include path directly to the compiler. This is the key fix.
        msbuild.exe pjproject/pjproject-vs14.sln /p:Configuration=Release /p:Platform=Win32 /p:AdditionalIncludeDirectories="../opus-source/include"

    - name: 8. Prepare Libraries for Final Build
      shell: pwsh
      run: |
        echo "--- Collecting all libraries for MicroSIP ---"
        # Create a single distribution directory for all final libraries
        $dist_dir = "dist/lib"
        New-Item -ItemType Directory -Force -Path $dist_dir
        
        # Copy the necessary PJSIP libraries from their output folder
        Copy-Item -Path pjproject/lib/*.lib -Destination $dist_dir
        
        # Copy the Opus library from its output folder
        Copy-Item -Path opus-build/Release/opus.lib -Destination $dist_dir
        
        echo "Libraries collected in $dist_dir"
        Get-ChildItem $dist_dir
        
    - name: 9. Generate Version Tag
      id: generate_version
      shell: bash
      run: echo "VERSION=v$(date +'%Y.%m.%d').${{ github.run_number }}" >> $GITHUB_OUTPUT
      
    - name: 10. Build the final project
      working-directory: ./sufficit-microsip
      run: |
        # Build the main project, passing the absolute path to our library collection
        msbuild.exe microsip.vcxproj /p:Configuration=Release /p:Platform=x86 /p:AdditionalLibraryDirectories="../dist/lib"

    - name: 11. Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: microsip-build
        path: sufficit-microsip/Release/microsip.exe

  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - name: 1. Download build artifact
      uses: actions/download-artifact@v4
      with:
        name: microsip-build
    - name: 2. Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.build.outputs.version }}
        name: "Release ${{ needs.build.outputs.version }}"
        body: "Versão compilada automaticamente a partir do último push para a branch main."
        files: microsip.exe
