# =================================================================================================
# GITHUB ACTIONS WORKFLOW FOR BUILDING THE SUFFICIT/SUFFICIT-MICROSIP PROJECT
#
# WORKFLOW VERSION: 29 (Final - MSBuild Append Strategy)
#
# Author: Hugo Castro de Deco, Sufficit
# Collaboration: Gemini AI for Google
# Date: June 13, 2025
# 
# This is the most robust and correct way to solve this dependency issue.
#
# 1.  **Setup & Checkout**: Checks out all repositories.
# 2.  **Configuration**: Copies `config_site.h`.
# 3.  **Build Opus**: Compiles the Opus library first.
# 4.  **Build PJSIP**: This is the key step. It calls `msbuild` telling it to use its
#     existing `AdditionalIncludeDirectories` AND append the absolute path to the
#     Opus include folder. This ensures all paths are present.
# 5.  **Consolidate & Final Build**: Gathers all libraries and compiles MicroSIP.
# 6.  **Artifact & Release**: Creates the final release.
# =================================================================================================
# == Explanation of Build Steps ==
#
# This workflow ABANDONS the fragile `patch.ps1` script. The root cause of the errors was
# that the script was overwriting the project's existing include paths.
#
# The definitive solution is to use the MSBuild command-line to APPEND the Opus include
# path to the existing paths, rather than replacing them. This is achieved by passing:
# /p:AdditionalIncludeDirectories="$(AdditionalIncludeDirectories);C:\path\to\opus"
#
name: Build C++ and Create Release

on:
  push:
    branches: [ "main" ]

jobs:
  build:
    runs-on: windows-latest
    outputs:
      version: ${{ steps.generate_version.outputs.VERSION }}

    steps:
    - name: 1. Checkout Main Repository
      uses: actions/checkout@v4
      with:
        path: sufficit-microsip

    - name: 2. Clone PJSIP Repository
      uses: actions/checkout@v4
      with:
        repository: pjsip/pjproject
        path: pjproject
    
    - name: 3. Clone Opus Repository
      uses: actions/checkout@v4
      with:
        repository: xiph/opus
        path: opus-source

    - name: 4. Copy PJSIP config_site.h
      shell: pwsh
      run: |
        Copy-Item -Path "sufficit-microsip/config_site.h" -Destination "pjproject/pjlib/include/pj/config_site.h"
        Write-Host "Copied config_site.h to PJSIP."

    - name: 5. Build Opus Library
      shell: pwsh
      run: |
        cmake -S opus-source -B opus-build -G "Visual Studio 17 2022" -A Win32
        cmake --build opus-build --config Release

    - name: 6. Add MSBuild to path
      uses: microsoft/setup-msbuild@v2

    - name: 7. Build PJSIP Solution
      shell: pwsh
      run: |
        # This is the definitive fix. We construct the absolute path to the Opus includes.
        $opus_include_path = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "opus-source/include"
        
        # We then tell MSBuild to use its existing include directories AND append ours.
        # The '$(AdditionalIncludeDirectories)' part is crucial - it preserves the original paths.
        $new_include_dirs = "$(AdditionalIncludeDirectories);$opus_include_path"
        
        Write-Host "Appending MSBuild include directories with: $opus_include_path"
        
        # We no longer need the fragile patch.ps1 script.
        msbuild.exe pjproject/pjproject-vs14.sln /p:Configuration=Release /p:Platform=Win32 /p:AdditionalIncludeDirectories="$new_include_dirs"

    - name: 8. Prepare Libraries for Final Build
      shell: pwsh
      run: |
        echo "--- Collecting all libraries for MicroSIP ---"
        $dist_dir = "dist/lib"
        New-Item -ItemType Directory -Force -Path $dist_dir
        Copy-Item -Path pjproject/lib/*.lib -Destination $dist_dir
        Copy-Item -Path opus-build/Release/opus.lib -Destination $dist_dir
        echo "Libraries collected in $dist_dir"
        Get-ChildItem $dist_dir
        
    - name: 9. Generate Version Tag
      id: generate_version
      shell: bash
      run: echo "VERSION=v$(date +'%Y.%m.%d').${{ github.run_number }}" >> $GITHUB_OUTPUT
      
    - name: 10. Build the final project
      working-directory: ./sufficit-microsip
      run: |
        msbuild.exe microsip.vcxproj /p:Configuration=Release /p:Platform=x86 /p:AdditionalLibraryDirectories="../dist/lib"

    - name: 11. Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: microsip-build
        path: sufficit-microsip/Release/microsip.exe

  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - name: 1. Download build artifact
      uses: actions/download-artifact@v4
      with:
        name: microsip-build
    - name: 2. Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.build.outputs.version }}
        name: "Release ${{ needs.build.outputs.version }}"
        body: "Versão compilada automaticamente a partir do último push para a branch main."
        files: microsip.exe
