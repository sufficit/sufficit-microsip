# =================================================================================================
# GitHub Actions Workflow: PJSIP Build for Windows, Linux, and Linux ARM
#
# This workflow automates the compilation of the PJSIP project for Windows (x64), Linux (x64),
# and Linux ARM (64-bit). It is triggered on pushes to the 'main' branch and automatically
# creates a tag and release for each successful build on 'main'. It also continues to be
# triggered by manually pushed version tags. Build artifacts are named
# using the UTC date and time of the build.
#
# The main change is the integration of pre-compiled Opus libraries (assuming that
# they are provided by the same company 'sufficit' via GitHub Releases), instead of
# installing system development packages or compiling Opus internally.
#
# Action Version: 1.0.44
# Last Updated: 2025-06-17
# =================================================================================================

name: C++ Build

on:
  push:
    branches:
      - main
    tags:
      - 'v*.*.*' # Trigger on version tags like v1.0.0
  workflow_dispatch: # Allows manual triggering of the workflow

env:
  # Define the GH_PAT variable for PowerShell script authentication
  # This variable must be configured as a secret in the repository.
  GH_PAT: ${{ secrets.GH_PAT }}

jobs:
  build-windows:
    runs-on: windows-2022

    steps:
      # Step 1: Checkout main source code
      - name: Checkout Source Code (sufficit/sufficit-microsip)
        uses: actions/checkout@v4
        with:
          repository: sufficit/sufficit-microsip
          path: . # Checkout to the root of the workspace
          # FIX: Explicitly pass the token here. This was the recurring error.
          token: ${{ secrets.GH_PAT }}
          fetch-depth: 1 # Only fetch the latest commit
          # IMPORTANT: Removed 'submodules: recursive' because 'sufficit/pjproject'
          # is being explicitly checked out in a separate step below.

      # Step 1.5: Checkout pjproject explicitly
      # This step ensures pjproject is always in external/pjproject,
      # independent of whether it's a git submodule in the main repo.
      - name: Checkout pjproject (sufficit/pjproject)
        uses: actions/checkout@v4
        with:
          repository: sufficit/pjproject
          path: external/pjproject # Checkout to the desired subdirectory
          # FIX: Explicitly pass the token here. This was the missing piece.
          token: ${{ secrets.GH_PAT }}
          submodules: false # No submodules within pjproject itself are needed
          ssh-strict: true
          ssh-user: git
          persist-credentials: true
          clean: true
          sparse-checkout-cone-mode: true
          fetch-depth: 1
          fetch-tags: false
          show-progress: true
          lfs: false
          set-safe-directory: true

      # Step 2: Generate build date for artifact naming
      - name: Get Build Date
        shell: pwsh
        run: |
          # Get current UTC date/time and format it
          $buildDate = (Get-Date -UFormat %Y%m%d-%H%M%S)
          Write-Host "Calculated BUILD_DATE: $buildDate"
          # Set as a workflow environment variable for subsequent steps
          Write-Host "BUILD_DATE=$buildDate" >> $env:GITHUB_ENV

      # Step 3: Setup MSBuild
      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v2
        with:
          msbuild-architecture: x64

      # Step 4: Navigate to PJSIP directory, download and prepare Opus, copy PJSIP config files, and compile PJSIP
      - name: Prepare and Build PJSIP
        shell: pwsh
        run: |
          # Navigate to the PJSIP directory
          Set-Location external/pjproject
          Write-Host "Current path Set-Location: $(Get-Location)"

          # Debug: Check PowerShell Version in use
          Write-Host "PowerShell Version being used:"
          $PSVersionTable | Format-List | Out-String | Write-Host
          
          # Download and prepare Opus libraries for PJSIP
          Write-Host "Executing scripts/download_opus_windows.ps1 for PJSIP (via temporary file)..."
          # The download_opus_windows.ps1 script is in the root of the main repository (sufficit-microsip)
          # Therefore, the path must be relative to GITHUB_WORKSPACE
          $scriptPath = "$env:GITHUB_WORKSPACE/scripts/download_opus_windows.ps1"
          $tempScriptPath = "temp_download_opus.ps1"
          
          $scriptContent = Get-Content $scriptPath -Raw -Encoding UTF8
          # Use .NET class to create UTF8 encoding without BOM
          $utf8NoBomEncoding = New-Object System.Text.UTF8Encoding($false)
          Set-Content -Path $tempScriptPath -Value $scriptContent -Encoding $utf8NoBomEncoding
          
          # Now, execute the temporary file
          # This command no longer passes the token as a parameter, as the script reads from $env:GH_PAT
          pwsh -File $tempScriptPath
          Write-Host "Scripts/download_opus_windows.ps1 completed."
          
          # Copy PJSIP configuration files
          Write-Host "Copying config_site.h and pjsip_extra_defines.h to PJSIP..."
          # These files must exist in $env:GITHUB_WORKSPACE/scripts/
          Copy-Item -Path "$env:GITHUB_WORKSPACE/scripts/config_site_content.h" -Destination "pjlib/include/pj/config_site.h" -Force
          Copy-Item -Path "$env:GITHUB_WORKSPACE/scripts/pjsip_extra_defines_content.h" -Destination "pjlib/include/pj/pjsip_extra_defines.h" -Force
          Write-Host "PJSIP configuration files copied."

          # Compile essential PJSIP projects
          Write-Host "Compiling essential PJSIP projects..."
          $pjsipProjectsToBuild = @(
              "pjlib/build/pjlib.vcxproj",
              "pjlib-util/build/pjlib_util.vcxproj",
              "pjnath/build/pjnath.vcxproj",
              "pjmedia/build/pjmedia.vcxproj",
              "pjmedia/build/pjmedia_audiodev.vcxproj",
              "pjmedia/build/pjmedia_codec.vcxproj",
              "pjmedia/build/pjmedia_videodev.vcxproj",
              "pjsip/build/pjsip_core.vcxproj",
              "pjsip/build/pjsip_simple.vcxproj",
              "pjsip/build/pjsip_ua.vcxproj",
              "pjsip/build/pjsua_lib.vcxproj",
              "pjsip/build/pjsua2_lib.vcxproj",
              "third_party/build/baseclasses/libbaseclasses.vcxproj",
              "third_party/build/g7221/libg7221codec.vcxproj",
              "third_party/build/gsm/libgsmcodec.vcxproj",
              "third_party/build/ilbc/libilbccodec.vcxproj",
              "third_party/build/milenage/libmilenage.vcxproj",
              "third_party/build/resample/libresample.vcxproj",
              "third_party/build/speex/libspeex.vcxproj",
              "third_party/build/srtp/libsrtp.vcxproj",
              "third_party/build/webrtc/libwebrtc.vcxproj",
              "third_party/build/yuv/libyuv.vcxproj"
          )
          
          # Mapping of original PJSIP output names to desired simple names
          # Note: Opus is already renamed by download_opus_windows.ps1, so not here.
          $libRenames = @{
              "pjlib-x86_64-x64-vc14-Release.lib" = "pjlib.lib";
              "pjlib-util-x86_64-x64-vc14-Release.lib" = "pjlib-util.lib";
              "pjnath-x86_64-x64-vc14-Release.lib" = "pjnath.lib";
              "pjmedia-x86_64-x64-vc14-Release.lib" = "pjmedia.lib";
              "pjmedia-audiodev-x86_64-x64-vc14-Release.lib" = "pjmedia-audiodev.lib";
              "pjmedia-codec-x86_64-x64-vc14-Release.lib" = "pjmedia-codec.lib";
              "pjmedia-videodev-x86_64-x64-vc14-Release.lib" = "pjmedia-videodev.lib";
              "pjsip-core-x86_64-x64-vc14-Release.lib" = "pjsip-core.lib";
              "pjsip-simple-x86_64-x64-vc14-Release.lib" = "pjsip-simple.lib";
              "pjsip-ua-x86_64-x64-vc14-Release.lib" = "pjsip-ua.lib";
              "pjsua-lib-x86_64-x64-vc14-Release.lib" = "pjsua-lib.lib"; # Crucial for pjsua.h
              "pjsua2-lib-x86_64-x64-vc14-Release.lib" = "pjsua2-lib.lib";
              "libbaseclasses-x86_64-x64-vc14-Release.lib" = "libbaseclasses.lib";
              "libg7221codec-x86_64-x64-vc14-Release.lib" = "libg7221codec.lib";
              "libgsmcodec-x86_64-x64-vc14-Release.lib" = "libgsmcodec.lib";
              "libilbccodec-x86_64-x64-vc14-Release.lib" = "libilbccodec.lib";
              "libmilenage-x86_64-x64-vc14-Release.lib" = "libmilenage.lib";
              "libresample-x86_64-x64-vc14-Release.lib" = "libresample.lib";
              "libspeex-x86_64-x64-vc14-Release.lib" = "libspeex.lib";
              "libsrtp-x86_64-x64-vc14-Release.lib" = "libsrtp.lib";
              "libwebrtc-x86_64-x64-vc14-Release.lib" = "libwebrtc.lib";
              "libyuv-x86_64-x64-vc14-Release.lib" = "libyuv.lib"
          }
          
          foreach ($projectFile in $pjsipProjectsToBuild) {
              $fullProjectPath = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "external/pjproject/$projectFile"
              Write-Host "Compiling project: $fullProjectPath"
              & msbuild.exe "$fullProjectPath" /p:Configuration=Release /p:Platform=x64 /m /t:Rebuild /p:ExcludeRestorePackageFolders=true
              if ($LASTEXITCODE -ne 0) {
                  Write-Host "##[error]PJSIP project compilation failed for $projectFile."
                  exit 1
              }
              
              # Rename and move the output .lib file to a central 'lib' directory
              $libNameWithoutSuffix = [System.IO.Path]::GetFileNameWithoutExtension($projectFile).Replace(".vcxproj", "")
              $originalLibNameWithSuffix = "$libNameWithoutSuffix-x86_64-x64-vc14-Release.lib"
              
              # Search for the newly compiled library file within the entire external/pjproject directory
              # This is robust against variations in MSBuild's exact output path.
              $foundLibFile = Get-ChildItem -Path $env:GITHUB_WORKSPACE\external\pjproject -Filter $originalLibNameWithSuffix -Recurse -ErrorAction SilentlyContinue | Select-Object -First 1
          
              # Define the central PJSIP lib directory where all renamed libraries should reside
              $centralPjsipLibDir = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "external/pjproject/lib"
              # Ensure this central directory exists
              New-Item -ItemType Directory -Path $centralPjsipLibDir -Force | Out-Null
          
              if ($libRenames.ContainsKey($originalLibNameWithSuffix)) {
                  $targetLibName = $libRenames[$originalLibNameWithSuffix]
                  $targetLibPath = Join-Path -Path $centralPjsipLibDir -ChildPath $targetLibName
              
                  if ($null -ne $foundLibFile) {
                      Write-Host "Found '$($originalLibNameWithSuffix)' at '$($foundLibFile.FullName)'. Renaming to '$($targetLibName)' and moving to '$($centralPjsipLibDir)'."
                      Move-Item -Path $foundLibFile.FullName -Destination $targetLibPath -Force
                  } else {
                      Write-Host "##[error]Error: Original library file '$($originalLibNameWithSuffix)' not found after compilation! Check PJSIP build logs. Failing workflow."
                      exit 1 # Fail the workflow if a critical library is not found for renaming
                  }
              } else {
                  Write-Host "##[warning]Warning: No rename mapping found for '$($originalLibNameWithSuffix)'. Leaving as is."
              }
          }
          Write-Host "PJSIP compilation completed."
          Set-Location $env:GITHUB_WORKSPACE
          Write-Host "Returning to MicroSIP root directory: $(Get-Location)"

      # Step 5: Patch microsip.vcxproj with absolute PJSIP paths
      - name: Patch microsip.vcxproj
        shell: pwsh
        run: |
          $microsipVcxprojPath = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "microsip.vcxproj"
          $pjsipRoot = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "external/pjproject"
          $pjsipLib = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "external/pjproject/lib"
          $pjsipAppsInclude = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "external/pjproject/pjsip/include"
          Write-Host "Patching microsip.vcxproj at: $microsipVcxprojPath"
          Write-Host "PJSIP Root: $pjsipRoot"
          Write-Host "PJSIP Lib Path: $pjsipLib"
          Write-Host "PJSIP Apps Include Path: $pjsipAppsInclude"
          & "$env:GITHUB_WORKSPACE/scripts/patch_microsip_vcxproj.ps1" `
            -ProjFile $microsipVcxprojPath `
            -PjsipIncludeRoot "$pjsipRoot" `
            -PjsipLibRoot "$pjsipLib" `
            -PjsipAppsIncludePath "$pjsipAppsInclude"

      # DEBUG STEP: List contents of PJSIP lib directory
      - name: List PJSIP Lib Directory Contents
        shell: pwsh
        run: |
          $pjsipLibDir = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "external/pjproject/lib"
          Write-Host "Listing contents of $pjsipLibDir:"
          Get-ChildItem -Path $pjsipLibDir | Format-List FullName, Length, CreationTimeUtc, LastWriteTimeUtc
          if (-not (Test-Path -Path (Join-Path $pjsipLibDir "pjlib-util.lib"))) {
              Write-Host "##[error]pjlib-util.lib was NOT found in $pjsipLibDir after all. This is unexpected."
              exit 1 # Fail immediately if the specific file isn't found
          }

      # Step 6: Compile the MicroSIP solution (final)
      - name: Compile MicroSIP Solution (Final)
        shell: pwsh
        run: |
          $microsipSlnPath = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "MicroSIP.sln"
          Write-Host "Compiling MicroSIP solution: $microsipSlnPath"
          msbuild.exe "$microsipSlnPath" /p:Configuration=Release /p:Platform=x64 /m /t:Build
          if ($LASTEXITCODE -ne 0) {
              Write-Host "##[error]MicroSIP compilation failed with exit code $LASTEXITCODE."
              exit 1
          }
          Write-Host "MicroSIP compilation completed successfully."

      # Step 7: Optional: Upload compiled MicroSIP artifacts
      - name: Upload MicroSIP Binaries
        uses: actions/upload-artifact@v4
        with:
          name: microsip-windows-x64-${{ env.BUILD_DATE }}
          path: |
            C:\a\sufficit-microsip\sufficit-microsip\x64\Release\microsip.exe
            C:\a\sufficit-microsip\sufficit-microsip\x64\Release\microsip.pdb
            C:\a\sufficit-microsip\sufficit-microsip\x64\Release\pjproject.dll # Ensure this is the correct DLL name
            C:\a\sufficit-microsip\sufficit-microsip\x64\Release\pjproject.lib # Ensure this is the correct LIB name
          retention-days: 7

  build-linux:
    runs-on: ubuntu-latest
    # Future implementation for Linux and Linux ARM (disabled for now)
    # needs: build-windows # Depends on Windows build success if common artifacts are needed
    steps: # Placeholder steps to satisfy GitHub Actions syntax requirements
      - name: Placeholder Linux Build
        run: echo "Linux build job is currently a placeholder."

  build-linux-arm:
    runs-on: ubuntu-latest
    # Future implementation for Linux ARM (disabled for now)
    # needs: build-windows
    steps: # Placeholder steps to satisfy GitHub Actions syntax requirements
      - name: Placeholder Linux ARM Build
        run: echo "Linux ARM build job is currently a placeholder."

  create-release:
    name: Create GitHub Release
    if: success() && startsWith(github.ref, 'refs/tags/v') # Only run if the previous job succeeded and it's a tag push
    runs-on: ubuntu-latest
    needs: [build-windows] # Ensure all build jobs that generate artifacts are listed here

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts # Downloads all artifacts into this directory

      - name: List downloaded artifacts (for debug)
        run: |
          ls -R artifacts

      - name: Get tag name
        id: get_tag
        run: echo "TAG_NAME=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
      
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2 # Use a more recent release action if available
        with:
          tag_name: ${{ env.TAG_NAME }}
          name: Release ${{ env.TAG_NAME }} (${{ env.BUILD_DATE }})
          body: |
            Automated build for tag ${{ env.TAG_NAME }} created on ${{ env.BUILD_DATE }}.
            See changelog for details.
          draft: false
          prerelease: false
          files: |
            artifacts/microsip-windows-x64-${{ env.BUILD_DATE }}/*
          # Add more lines here to include artifacts from other builds (Linux, etc.)
          # if they are enabled and their artifacts are downloaded to 'artifacts/'
          # artifacts/linux-build-artifacts/*