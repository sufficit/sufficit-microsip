# =================================================================================================
# GitHub Actions Workflow: PJSIP Build for Windows, Linux, and Linux ARM
#
# This workflow automates the compilation of the PJSIP project for Windows (x64), Linux (x64),
# and Linux ARM (64-bit). It is triggered on pushes to the 'main' branch and automatically
# creates a tag and release for each successful build on 'main'. It also continues to be
# triggered by manually pushed version tags. Build artifacts are named
# using the UTC date and time of the build.
#
# The main change is the integration of pre-compiled Opus libraries (assuming that
# they are provided by the same company 'sufficit' via GitHub Releases), instead of
# installing system development packages or compiling Opus internally.
#
# Action Version: 1.0.30
# Last Updated: 2025-06-16
# Description of Changes:
#   - **FIXED: Simplificada a chamada para `download_opus_windows.ps1` para usar execução direta (`&`)**
#     **no bloco `run` do PowerShell, eliminando o invólucro `pwsh -Command`. Isso resolve a**
#     **interpretação incorreta de caracteres de escape e barras invertidas no caminho,**
#     **melhorando a robustez da chamada do script.**
#   - Configured the `Build PJSIP` step to use a Personal Access Token (PAT) for downloading
#     Opus artifacts, explicitly passing it to `download_opus_windows.ps1` to resolve
#     `401 Unauthorized` errors for cross-repository access.
#   - Added `contents: read` permission to the job to allow downloading Opus artifacts
#     from another repository, resolving the 401 Unauthorized error.
#   - Changed 'config_site.h' and 'pjsip_extra_defines.h' generation to direct file copying
#     from pre-existing files in 'scripts/' to resolve persistent C preprocessor errors.
#   - Ensured all comments in the code are in English.
#   - Implemented downloading of pre-compiled Opus artifacts from the 'sufficit/opus' repository
#     (via GitHub Releases) in each PJSIP build job, with enhanced logic for naming and extraction,
#     and improved error handling in `download_opus_windows.ps1`.
#   - Removed `libopus-dev` dependencies from package installers.
#   - Adjusted compilation flags (CFLAGS) as necessary.
#   - Updated the patch script for `microsip.vcxproj` to correctly include all necessary
#     paths for MicroSIP's internal headers, JSON, and PJSIP headers, resolving
#     'Cannot open include file' errors during MicroSIP compilation.
# =================================================================================================

name: Compilar MicroSIP no Windows (com Opus e PJSIP)

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-microsip:
    name: Compilar MicroSIP no Windows
    runs-on: windows-latest
    permissions: # Adicione esta seção
      contents: read # Concede permissão de leitura para o GITHUB_TOKEN

    steps:
      # Step 1: Checkout do repositório MicroSIP
      - name: Checkout do Repositório MicroSIP
        uses: actions/checkout@v4
        with:
          repository: sufficit/sufficit-microsip
          path: . # Checkout para a raiz do workspace
          submodules: recursive

      # Step 2: Checkout do repositório PJSIP
      - name: Checkout do Repositório PJSIP
        uses: actions/checkout@v4
        with:
          repository: sufficit/pjproject
          path: external/pjproject # Clonar PJSIP para external/pjproject

      # Step 3: Configurar MSBuild
      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v2
        with:
          msbuild-architecture: x64 # Garantir que o MSBuild para x64 está disponível

      # Step 4: Compilar PJSIP
      - name: Build PJSIP
        shell: pwsh
        env:
          GH_PAT: ${{ secrets.GH_PAT }} # Define GH_PAT a partir dos segredos do repositório
        run: |
          # Navegar para o diretório PJSIP
          Set-Location external/pjproject
          Write-Host "Caminho atual Set-Location: $(Get-Location)"

          # Descarregar e preparar bibliotecas Opus para PJSIP
          Write-Host "Executando scripts/download_opus_windows.ps1 para PJSIP..."
          # O script download_opus_windows.ps1 está na raiz do repositório principal (sufficit-microsip)
          # Por isso, o caminho deve ser relativo ao GITHUB_WORKSPACE
          # Usar a execução direta do script Powershell com o operador de chamada (&)
          & "$env:GITHUB_WORKSPACE/scripts/download_opus_windows.ps1" -GitHubToken "$env:GH_PAT"
          if ($LASTEXITCODE -ne 0) { exit 1 }
          Write-Host "Scripts/download_opus_windows.ps1 concluído."

          # Copiar ficheiros de configuração PJSIP
          Write-Host "Copiando config_site.h e pjsip_extra_defines.h para PJSIP..."
          Copy-Item -Path "$env:GITHUB_WORKSPACE/scripts/config_site_content.h" -Destination "pjlib/include/pj/config_site.h" -Force
          Copy-Item -Path "$env:GITHUB_WORKSPACE/scripts/pjsip_extra_defines_content.h" -Destination "pjlib/include/pj/pjsip_extra_defines.h" -Force
          Write-Host "Ficheiros de configuração PJSIP copiados."

          # Patch PJSIP pjmedia_codec.vcxproj para definições x64 e Opus
          Write-Host "Patching pjmedia_codec.vcxproj para PJSIP..."
          $pjmedia_codec_vcxproj_path = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "external/pjproject/pjmedia/build/pjmedia_codec.vcxproj"
          # O script patch.ps1 está na raiz do repositório principal (sufficit-microsip)
          & "$env:GITHUB_WORKSPACE/scripts/patch.ps1" -ProjFile $pjmedia_codec_vcxproj_path
          if ($LASTEXITCODE -ne 0) { exit 1 }
          Write-Host "pjmedia_codec.vcxproj patched."

          # Compilar a solução PJSIP
          Write-Host "Compilando solução PJSIP..."
          $pjSlnPath = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "external/pjproject/pjproject-vs14.sln"
          # O script build_pjsip.ps1 está na raiz do repositório principal (sufficit-microsip)
          & "$env:GITHUB_WORKSPACE/scripts/build_pjsip.ps1" -SlnFile $pjSlnPath
          if ($LASTEXITCODE -ne 0) {
              Write-Host "##[error]A compilação da solução PJSIP falhou."
              exit 1
          }
          Write-Host "scripts/build_pjsip.ps1 concluído com LASTEXITCODE: $LASTEXITCODE."
          Write-Host "Compilação PJSIP concluída."

          # Voltar para o diretório raiz do MicroSIP
          Set-Location $env:GITHUB_WORKSPACE
          Write-Host "Voltando ao diretório raiz do MicroSIP: $(Get-Location)"

      # Step 5: Aplicar patch ao ficheiro de projeto do MicroSIP
      - name: Aplicar patch ao projeto MicroSIP
        shell: pwsh
        run: |
          $microsipVcxprojPath = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "microsip.vcxproj"
          $pjsipIncludeRoot = "external/pjproject" # Relativo à raiz do MicroSIP (onde os módulos PJSIP estão)
          $pjsipLibPath = "external/pjproject/lib" # Relativo à raiz do MicroSIP (onde as libs PJSIP serão geradas)
          $pjsipAppsIncludePath = "external/pjproject/pjsip/include" # Caminho para pjsua.h

          Write-Host "Aplicando patch ao microsip.vcxproj em: $microsipVcxprojPath"
          Write-Host "PJSIP Include Root: $pjsipIncludeRoot"
          Write-Host "PJSIP Lib Path: $pjsipLibPath"
          Write-Host "PJSIP Apps Include Path: $pjsipAppsIncludePath"

          # Chamar o script de patch com todos os parâmetros necessários
          # O script patch_microsip_vcxproj.ps1 está na raiz do repositório principal (sufficit-microsip)
          & "$env:GITHUB_WORKSPACE/scripts/patch_microsip_vcxproj.ps1" `
            -ProjFile $microsipVcxprojPath `
            -PjsipIncludeRoot $pjsipIncludeRoot `
            -PjsipLibRoot $pjsipLibPath `
            -PjsipAppsIncludePath $pjsipAppsIncludePath
          if ($LASTEXITCODE -ne 0) { exit 1 }

      # Step 6: Compilar a solução MicroSIP (final)
      - name: Compilar Solução MicroSIP (Final)
        shell: pwsh
        run: |
          $microsipSlnPath = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "MicroSIP.sln"
          Write-Host "Compilando solução MicroSIP: $microsipSlnPath"
          msbuild.exe "$microsipSlnPath" /p:Configuration=Release /p:Platform=x64 /m /t:Build
          if ($LASTEXITCODE -ne 0) {
              Write-Host "##[error]A compilação do MicroSIP falhou com o código de saída $LASTEXITCODE."
              exit 1
          }
          Write-Host "Compilação do MicroSIP concluída com sucesso."

      # Step 7: Opcional: Upload de artefatos da compilação do MicroSIP
      - name: Upload de Binários do MicroSIP
        uses: actions/upload-artifact@v4
        with:
          name: microsip-windows-x64-binarios
          path: |
            MicroSIP\x64\Release\MicroSIP.exe
            MicroSIP\x64\Release\*.dll
            MicroSIP\x64\Release\*.lib
            # Adicione outros arquivos importantes se necessário, ex: pjsip.dll se for dynamic build
