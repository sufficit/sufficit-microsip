# =================================================================================================
# GITHUB ACTIONS WORKFLOW FOR BUILDING THE SUFFICIT/SUFFICIT-MICROSIP PROJECT
#
# WORKFLOW VERSION: 21 (Definitive Fix for YAML Expression Parsing)
#
# Author: Hugo Castro de Deco, Sufficit
# Collaboration: Gemini AI for Google
# Date: June 13, 2025
#
# == Logic and Execution Steps ==
#
# This workflow uses the user-provided external scripts and fixes the final YAML parsing
# error by switching the shell to BASH for the version-generation step, avoiding syntax conflicts.
# =================================================================================================

name: Build C++ and Create Release

on:
  push:
    branches: [ "main" ]

jobs:
  build:
    runs-on: windows-latest
    outputs:
      version: ${{ steps.generate_version.outputs.VERSION }}

    steps:
    - name: 1. Checkout Main Repo & Scripts
      uses: actions/checkout@v4

    - name: 2. Prepare Dependencies and Patch
      shell: pwsh
      run: |
        echo "Cloning PJSIP..."
        git clone --depth 1 https://github.com/pjsip/pjproject.git
        
        echo "Cloning Opus..."
        git clone --depth 1 https://github.com/xiph/opus.git ./pjproject/third_party/opus

        echo "Merging PJSIP files into workspace root..."
        # THE FIX: Use Copy-Item to merge directories, which avoids conflicts.
        Copy-Item -Path ./pjproject/* -Destination ./ -Recurse -Force
        Copy-Item -Path ./pjproject/.* -Destination ./ -Recurse -Force -ErrorAction SilentlyContinue
        Remove-Item -Path ./pjproject -Recurse -Force
        
        echo "Copying config file and executing patch script..."
        Copy-Item -Path ./config_site.h -Destination ./pjlib/include/pj/ -Force
        ./patch.ps1
        
    - name: 3. Add MSBuild to path
      uses: microsoft/setup-msbuild@v2

    - name: 4. Build Entire PJSIP Solution
      shell: pwsh
      run: |
        echo "Building the entire PJSIP solution..."
        msbuild.exe pjproject-vs14.sln /p:Configuration=Release /p:Platform=Win32

    - name: 5. Prepare Libraries for Final Build
      shell: pwsh
      run: |
        echo "--- Preparing all required libraries for MicroSIP ---"
        New-Item -ItemType Directory -Force -Path "./lib"
        New-Item -ItemType Directory -Force -Path "./third_party/opus/Win32"
        
        $opus_source_file = Get-Item "third_party/lib/libopus-*.lib"
        Copy-Item -Path $opus_source_file.FullName -Destination "./third_party/opus/Win32/opus.lib" -Force
        
        $pjlib_source = Get-Item "lib/libpjproject-i386-Win32-vc14-Release.lib"
        $pjlib_dest_renamed = "./lib/libpjproject-i386-Win32-vc14-Release-Static.lib"
        Copy-Item -Path $pjlib_source.FullName -Destination $pjlib_dest_renamed -Force
        
        Write-Host "Library collection successful."
        
    - name: 6. Generate Version Tag
      id: generate_version
      # Using BASH shell for this step is safer because its syntax does not conflict with GitHub's ${{...}} expressions.
      shell: bash
      run: echo "VERSION=v$(date +'%Y.%m.%d').${{ github.run_number }}" >> $GITHUB_OUTPUT
      
    - name: 7. Build the final project
      run: msbuild.exe /p:Configuration=Release /p:Platform=x86 microsip.vcxproj

    - name: 8. Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: microsip-build
        path: Release/microsip.exe

  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - name: 1. Download build artifact
      uses: actions/download-artifact@v4
      with:
        name: microsip-build

    - name: 2. Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.build.outputs.version }}
        name: "Release ${{ needs.build.outputs.version }}"
        body: |
          Versão compilada automaticamente a partir do último push para a branch main.
        files: microsip.exe