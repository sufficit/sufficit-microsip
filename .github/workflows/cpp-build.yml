# =================================================================================================
# GitHub Actions Workflow: Compilação do MicroSIP no Windows com Opus
#
# Este fluxo de trabalho automatiza a compilação do projeto MicroSIP para Windows (x64),
# incorporando as bibliotecas Opus pré-compiladas e a própria biblioteca PJSIP.
#
# Assume-se que:
# - O script 'scripts/download_opus_windows.ps1' está presente no repositório.
# - A PJSIP é compilada a partir de 'sufficit/pjproject' dentro do workflow.
# =================================================================================================

name: Compilar MicroSIP no Windows (com Opus e PJSIP)

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-microsip:
    name: Compilar MicroSIP no Windows
    runs-on: windows-latest

    steps:
      # Step 1: Checkout do repositório MicroSIP
      - name: Checkout do Repositório MicroSIP
        uses: actions/checkout@v4
        with:
          repository: sufficit/sufficit-microsip
          path: . # Checkout para a raiz do workspace
          submodules: recursive

      # Step 2: Checkout do repositório PJSIP
      - name: Checkout do Repositório PJSIP
        uses: actions/checkout@v4
        with:
          repository: sufficit/pjproject
          path: external/pjproject # Checkout PJSIP para um subdiretório
          submodules: recursive

      # Step 3: Adicionar MSBuild ao PATH do ambiente
      - name: Adicionar MSBuild ao Path
        uses: microsoft/setup-msbuild@v2

      # Step 4: Preparar e Compilar PJSIP
      - name: Preparar e Compilar PJSIP
        shell: pwsh
        run: |
          # Navegar para o diretório PJSIP
          Set-Location external/pjproject
          Write-Host "Caminho atual Set-Location: $(Get-Location)"

          # Descarregar e preparar bibliotecas Opus para PJSIP
          Write-Host "Executando scripts/download_opus_windows.ps1 para PJSIP..."
          scripts/download_opus_windows.ps1
          # Manter a verificação para este script, pois é uma dependência externa
          if ($LASTEXITCODE -ne 0) {
              Write-Host "##[error]download_opus_windows.ps1 falhou com exit code $LASTEXITCODE."
              exit 1
          }
          Write-Host "Scripts/download_opus_windows.ps1 concluído."

          # Copiar ficheiros de configuração PJSIP
          Write-Host "Copiando config_site.h e pjsip_extra_defines.h para PJSIP..."
          Copy-Item -Path "scripts/config_site_content.h" -Destination "pjlib/include/pj/config_site.h" -Force
          Copy-Item -Path "scripts/pjsip_extra_defines_content.h" -Destination "pjlib/include/pj/pjsip_extra_defines.h" -Force
          Write-Host "Ficheiros de configuração PJSIP copiados."

          # Patch PJSIP pjmedia_codec.vcxproj para definições x64 e Opus
          Write-Host "Patching pjmedia_codec.vcxproj para PJSIP..."
          $pjmedia_codec_vcxproj_path = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "external/pjproject/pjmedia/build/pjmedia_codec.vcxproj"
          scripts/patch.ps1 -ProjFile $pjmedia_codec_vcxproj_path
          # Manter a verificação para este script
          if ($LASTEXITCODE -ne 0) {
              Write-Host "##[error]scripts/patch.ps1 para pjmedia_codec.vcxproj falhou com exit code $LASTEXITCODE."
              exit 1
          }
          Write-Host "pjmedia_codec.vcxproj patched."

          # Compilar a solução PJSIP
          Write-Host "Compilando solução PJSIP..."
          $pjSlnPath = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "external/pjproject/build/vs/pjproject-vs14.sln"
          # Temporariamente, não sair em caso de erro aqui para ver o output do MSBuild
          scripts/build_pjsip.ps1 -SlnFile $pjSlnPath
          # Apenas loga o código de saída, para ver o que o MSBuild imprimiu
          Write-Host "scripts/build_pjsip.ps1 concluído com LASTEXITCODE: $LASTEXITCODE."
          # Se o build do PJSIP falhar, ainda precisamos que a etapa falhe.
          if ($LASTEXITCODE -ne 0) {
              Write-Host "##[error]A compilação da solução PJSIP falhou."
              exit 1
          }
          Write-Host "Compilação PJSIP concluída."

          # --- DEBUG: Listar conteúdo da pasta de inclusão pjsip-apps/include do PJSIP após compilação ---
          Write-Host "--- DEBUG: Conteúdo de external/pjproject/pjsip-apps/include/ após compilação PJSIP ---"
          Get-ChildItem -Path "pjsip-apps/include" -Recurse | Select-Object FullName
          Write-Host "-----------------------------------------------------------------------------------"
          # --------------------------------------------------------------------------------------------

          # Voltar para o diretório raiz do MicroSIP
          Set-Location $env:GITHUB_WORKSPACE
          Write-Host "Voltando ao diretório raiz do MicroSIP: $(Get-Location)"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Necessário para autenticação na API do GitHub

      # Step 5: Copiar componentes PJSIP compilados para o MicroSIP
      - name: Copiar Componentes PJSIP para MicroSIP
        shell: pwsh
        run: |
          $pjsipSourceDir = "external/pjproject"
          $microsipPjLibDir = "lib/pjproject" # Novo diretório para as libs do PJSIP dentro do MicroSIP
          New-Item -ItemType Directory -Path $microsipPjLibDir -Force
          Write-Host "Criado diretório de destino PJSIP para MicroSIP: $microsipPjLibDir"

          Write-Host "Copiando bibliotecas PJSIP (.lib) para MicroSIP..."
          # Copia todos os .lib da pasta 'lib' do PJSIP para a nova pasta 'lib/pjproject' do MicroSIP
          Copy-Item -Path "$pjsipSourceDir/lib/*.lib" -Destination "$microsipPjLibDir/" -Force
          Write-Host "Bibliotecas PJSIP .lib copiadas."

          Write-Host "Copiando ficheiros de inclusão PJSIP para MicroSIP..."
          # A estrutura de inclusão da PJSIP é complexa. Copia as pastas relevantes.
          Copy-Item -Recurse -Path "$pjsipSourceDir/pjlib/include" -Destination "$microsipPjLibDir/pjlib/include" -Force
          Copy-Item -Recurse -Path "$pjsipSourceDir/pjlib-util/include" -Destination "$microsipPjLibDir/pjlib-util/include" -Force
          Copy-Item -Recurse -Path "$pjsipSourceDir/pjnath/include" -Destination "$microsipPjLibDir/pjnath/include" -Force
          Copy-Item -Recurse -Path "$pjsipSourceDir/pjmedia/include" -Destination "$microsipPjLibDir/pjmedia/include" -Force
          Copy-Item -Recurse -Path "$pjsipSourceDir/pjsip/include" -Destination "$microsipPjLibDir/pjsip/include" -Force
          # Esta pasta é crucial, pois contém 'pjsua-lib'
          Copy-Item -Recurse -Path "$pjsipSourceDir/pjsip-apps/include" -Destination "$microsipPjLibDir/pjsip-apps/include" -Force
          Write-Host "Ficheiros de inclusão PJSIP copiados."

          Write-Host "Componentes PJSIP copiados para $microsipPjLibDir."

          # --- DEBUG: Listar conteúdo da pasta de inclusão pjsip-apps/include do MicroSIP após cópia ---
          Write-Host "--- DEBUG: Conteúdo de lib/pjproject/pjsip-apps/include/ após cópia para MicroSIP ---"
          Get-ChildItem -Path "$microsipPjLibDir/pjsip-apps/include" -Recurse | Select-Object FullName
          Write-Host "--------------------------------------------------------------------------------"
          # ------------------------------------------------------------------------------------------

      # Step 6: Patch microsip.vcxproj para incluir PJSIP paths
      # O script 'patch_microsip_vcxproj.ps1' é assumido como existente na pasta 'scripts/'
      - name: Patch microsip.vcxproj para PJSIP
        shell: pwsh
        run: |
          $microsipVcxprojPath = "microsip.vcxproj" # Caminho do .vcxproj do MicroSIP
          $pjsipLibPath = "lib/pjproject" # Caminho relativo da PJSIP para as libs
          $pjsipIncludeRoot = "lib/pjproject" # Caminho relativo da PJSIP para os includes (raiz da estrutura copiada)

          $patchMicrosipScriptPath = "scripts/patch_microsip_vcxproj.ps1"

          # Executa o script de patch existente
          Write-Host "Executando $patchMicrosipScriptPath em $microsipVcxprojPath"
          # Ambos PjsipIncludeRoot e PjsipLibRoot apontam para o mesmo diretório base 'lib/pjproject'
          & $patchMicrosipScriptPath -ProjFile $microsipVcxprojPath -PjsipIncludeRoot $pjsipIncludeRoot -PjsipLibRoot $pjsipLibPath
          if ($LASTEXITCODE -ne 0) { exit 1 }
          Write-Host "Patch microsip.vcxproj concluído."

      # Step 7: Compilar a solução MicroSIP (final)
      - name: Compilar Solução MicroSIP (Final)
        shell: pwsh
        run: |
          # O caminho da solução deve ser relativo à raiz do workspace, pois estamos de volta à raiz
          $microsipSlnPath = "MicroSIP.sln" # Assumindo que MicroSIP.sln está na raiz do repositório
          Write-Host "Compilando solução MicroSIP: $microsipSlnPath"
          msbuild.exe "$microsipSlnPath" /p:Configuration=Release /p:Platform=x64 /m /t:Build
          if ($LASTEXITCODE -ne 0) {
              Write-Host "##[error]A compilação do MicroSIP falhou com o código de saída $LASTEXITCODE."
              exit 1
          }
          Write-Host "Compilação do MicroSIP concluída com sucesso."

      # Step 8: Opcional: Upload de artefatos da compilação do MicroSIP
      - name: Upload de Binários do MicroSIP
        uses: actions/upload-artifact@v4
        with:
          name: microsip-windows-x64-binarios
          path: |
            bin/Release/*.exe # Exemplo: Ajuste para o caminho onde os executáveis do MicroSIP são gerados
            bin/Release/*.dll
            lib/pjproject/*.lib # libs PJSIP copiadas para aqui
            # Adicione outros arquivos importantes, se necessário
          retention-days: 7
